%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 7.0%%For: (Waldo p Cabrera) (LCI)%%Title: (Pok\216 4-color logo.eps)%%CreationDate: (8/25/98) (5:25 PM)%%BoundingBox: 41 277 563 530%%HiResBoundingBox: 41.647 277.7057 562.8529 529.5063%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_screens_AI5 1.0 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.2 0%%+ procset Adobe_cshow 2.0 8%AI5_FileFormat 3.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 33 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 1 0 0 1 0 0 0 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 294 456 2 826 581 18 0 1 3 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:30 33%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -33 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 64 8%%BeginData: 11190 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD45FF050D07FD7CFF000D070D06FD7AFF060D070D070D07FD78FF%010D0707060D0707FD77FF060D070D070D070D070DFD75FF060D060D070D%9F0D070D060DFD73FF070D070D070DC7C79F0D070D07FD65FF0706060607%FD08FF060706070607C7C7060706070607FD62FF0D070D070D060D070DFD%07FF0D070D070DC70D070D070D070DFD0BFF0D070D070D070D070DFD2FFF%0707060D0707060D0707FD13FF07060D0707060D0707060D0707FD05FF0D%0707060D0707060D070706FD05FF0707060D0707060D0707060D0707060D%07FD2BFF0D070D070D070D070D070D070D070D07FD0EFF0D070D070D070D%070D070D070D070D070DFFFFFF06050D070D070D070D070DFD05FF06060D%070D070D070D070D070D070D070D070D07FD08FF0D07FD1EFF0607060706%070607060706070607060706070607FD09FF060607060706070607060706%070607060706070607FFFF0006000706070607060706070607FFFF010606%07060706070607060706C19FC706070607FD06FF000606070607060706FD%17FF0D070D070D070D070D070D9FC8C1C7070D070D070D070DFD07FF0606%0D070D070D070D9FC8070D070D070D9F0D070D070DFF06070D070D070D07%0D070D070D070D0706060D070D070D070D070D070DC7CDC1C7070D07FD06%FF06060D070D070D070D070D070DFD11FF060706070607060706C19FFD05%C79FC19FC7060706070607FD06FF0606060706079FC7C7C79F0706070607%06C19F0706070607060706070607060706070607060706070607060706C1%9FC79FC1060706C7C7C79F070607FD06FF01060607060706070607060706%07060606FD0BFF0D060D070D060D07C79FCCC7C7C7CCC7C7C7CCC7C79FC7%C10D060D070DFD05FF06060D060D070DC7CCC7C79F0D070D06CCC7C79F0D%070D060D070D060DC1C79FC7C1C79F0D070D060D070D060DC7C7C7CCC10D%060DFD04C7070D06FD06FF06060D070D9FC7070D060D070D060D070D060D%070D06FD05FF070607060706079FFD11C79F07060706FD05FF0606060706%0706FD04C7C1060706FD04C7C19F070607060706C1FD07C7C19FC7060706%07060706FD05C7060706C7C7C79F070607FD06FF06060607060706C79FC1%9FC7060706070607060706070607060706070D070D07C7C7CDC7CCC7CDC7%CCC7CDC7CCC7CDC7CCC7CDC7C79F0D070D07FD04FF0D060D070D070D07CD%C7CC9F0D07CCC7CDC7CCC7C8070D070D07CCC7CD070D060D07CCC7C8C10D%070D070D07CDC7CCC7CDC10D070DC7CCC7C8070D070DFD05FF0D060D070D%070DC7CCC7C8C10D070D070D070D070D070D070D07000606070607FD15C7%C106070607FD04FF0607060706070607C7C7C7C10607FD06C70607060706%C7C7C106070607060706C7C707060706070607FD06C70607FD04C79F0706%0706FFFFFF060706070607060706FD05C70607060706079FC70607060706%070605060707060DC7C7C7CCC7C7C7CCFD04C70707060D07C7C7CCC1C706%0D07FD04FF07060D0607060D07C7C7CCC107C7CCC7C7C7CC0707060D0707%C7CC0707060D0707060DC707060D0707060D07C7C7CCC7C79FC707C7C7CC%C7C79F0D0707060D0707060D0707060D0707C7CCC7C79F0D0707060D07C7%9FC7C107060D070006000706070607FD0AC706070607060706C7C7C79F07%0607FFFFFF070607060706070607FD0AC7060706070607C7C79F07060706%070607C7070607060706070607FD06C79F07FD05C7C10607060706070607%060706070607FD05C7C19F07060706FD05C706070607FF0606060D060D07%CCC7CDC7CCC7CDC7CCC7C8070D060D060706CDC7C7060D070D060D070D06%0D070D060D07CCC7CDC7CCC7CDC7CC060D070D060D07CCC7C80607060D06%07C70D070D060D070D060D07CCC7CDC7CCC7C8C1CCC7CDC7CC9F0D070D06%0D070D9FC8070D060D070DC7CDC7CCC7C8070D060DC7CCC7CDC10D060DFF%FFFF01060607060706070607FD06C79F07060752070607C7C79F07060706%0706070607060706070607FD08C70607060706070607C7C79F0706070607%C70706070607060706070607FD0DC7C106070607060D070D06C79FC10607%0607FD04C79F07060706FD04C707060706FFFFFF0606070707060D070706%CCC7C7C7CCC7C70607067D060706C7C70D0707060D07079FC7C1C79F0D07%07060DC7C7C7CCC7C7060D070706FF070706CCC7C706070607C70D070706%0DC107060D0707C7CCC7C7C7CCC7C7C7CCC7C7C7CC0707060DC10D070D07%C7C70DC1C7060D07C7C7CCC7C7060D0707C7CCC7C7060D0707FD04FFFD04%06070607060706FD06C707060706070607C7C10607060706C70707060DC7%C19F07060706FD05C79F070607060706070607C7C7C7C10607C7C1060706%07C7C79F0706070607FD0CC7060706070607060706C7C7C106079F070607%06C7C7C79F070607FD04C79F070607FD05FF060D0607060D0607060DC7CC%C7CDC7CC9F0D0607060DC7CC060D060706C8070D070DC1CCC70DC107060D%06CCC7CDC7C79FC80607060D0607060DC7CC9FC8C7CC9FC8C1C7C7CDC7C7%9F0D0607060DC7CC060DC7CCC7CDC7CC9F0D060706CD070D060D07CC9F0D%07C79F0D0607C7CDC7C79F0D06CCC7CDC707060D06FD06FF060706070606%060706FD06C7C10607060706C70607060706C79F07060706C7C7C106C79F%070607FD05C7C19FC79F070607060706FD0EC70706070607C7C79F0706FD%04C707C7C1060706C79F070607060706070607C7C1060706FD04C7C10607%FD04C706070607FD07FFFD050607060706CCC7C7C7CCC107060706C79F07%06070607C7C7060D0707C7CC0707C7C7060706CCC7C7C7CCFD04C7C1C79F%07060706CCC7C7C7CCC7C7C7CCC7C7C70706070607FD04C7060706CCC7C7%06CCC1070607C7C79F0706070607060706CCC1070607C107C7CCC10706CC%C7C79F070607FD08FF06FFFF010606070607FD06C79F0706C70607060706%07C7C79F0706070607060706C79F070607C7C79F0706FD05C79FC1060706%070607FD08C706070607060706C7C7C79F070607C7C706079F07060706C7%C7C106070606060706C7C7C7060706C706C7C7C706FD04C707060706FD0B%FFFD040607060DC7CCC7CDC7C7C7CD0607060D060706CDC7C7060D060706%0D0607C7C8060706CDC7C7060D0607C7CDC7CC9FC80607060D0607060D06%07060D0607060D060706CDC7CCC7C80607060DC107060D0607060DC7CC9F%C8C107060706CCC7CD0607060DC107C7CDC1CCC7CDC7C7060D0607FD0CFF%060007060706FD07C706070607060706C7C7C79FC1060706070607C7C79F%070607C7C79F070607060706C7C7C79FC706070607060706070607060706%0706070607FD04C79F0706070607060706C7060706C7C7C79FC79FC19FC7%C7C79F070607C7C706FD07C79F070607FD0DFF06060507060706CCC7C7C7%CCC107060706070607C7C7C7CCC1C7060706079FCCC7C7060706C7C7C706%07060706070607C7C79FC7C107060706070607060706070606060706C7C7%CCC70706070607060706079F070607C7CCC7C7C7CCC7C7C7CCC707060706%C70607C7C7C7CCC7C7C707060706FD0EFF000606070607FD06C706070607%06070607FD04C79FC19FFD05C706070607C7C79F07060706070607060706%C7C7C79FC19F07060706070006000506070607060706C706070607060706%0706C106070607FD09C707060706C79F0706FD06C7C106070607FD0EFF06%05060607060DC7CCC7CDC107060D0607060D06CCC7CDC7CCC7CDC7CCC7CD%C107060D06CCC7C8060706060607060D0607060DC7CCC7C8C107060D06FF%FF280507060D0607060D0607060D0607060D06079F0D0607060DC7CCC7CD%C7CC060D0607060DC7C7060DC7CCC7CDC7CC9F0D0607FD0FFF0006000706%0706FD05C79F07060706070607FD0BC707060706C7C7C79F070607000605%0706070607060706C7C7C7060706FFFFFF00050607060706070607060706%070607060706C19F070607060706C7C707060706070607C7C79F0706FD06%C707060706FD10FF050600070607C7CCC7C79FC70607060606070607C7C7%C7CCC7C7C7CCC70706070607C7CCC7C7060706FF05FD0406070607060706%079F070607FFFFFF06000606060506060706070607060706070607C7C79F%07060706070607060706070607FD04C70607C7CCFD04C706070607FD10FF%06000506070606FD04C79F07FD07060706FD05C706070606060706C7C7C7%9F060607FFFFFF0600060007060606070606060706FD07FF000600060006%00060006060706060607C7C19F070606060706060607060606C7C7C70607%06FD05C79F070606FD12FF060007060706CDC7CCC7C80607060706070607%060706070607060706070607060706070607060706FD05FF05FD04060706%0706070607FD0FFF06050605070607060706070607060706070506060706%07C7CC9F070607C7CDC7CCC707060706FD12FF00050007060706C7C7C79F%C706070606000706070607060706070607060606070607060706070607FD%07FF06000600070607060706FD0FFF00FF00060607060706070607060706%07FFFF0006060706070607060706FD04C7C106070607FD13FF0506060706%07C7CCC7C79F070607050605060607060706070607000706070607060706%07060706FD09FF0506000606070607FD11FF060006050706070607060706%0706FFFF0600070607060706070607C7C7C7CCC1070607FD14FF05000506%070606C7C7C7C106070606FF06000500060005000500FFFD050607060500%06FD0DFF050006000606FFFFFF06070606FD0BFF05000500050005000506%070606FF06000500070606060706060607C7C7C707060606FD14FF050600%07060706CDC7CC9F07060706FFFFFF0028050600FD04FF0D0606002805FD%13FF050600FFFFFF0607FF0706FD11FF050600280506FFFFFF0600060506%00060506060706CCC7C806070607FD15FF00050007060606C70606060706%06FD24FF0607FD05FF06FFFFFF06FD07FF060607FD16FF00060006060706%0606070606FD16FF2805060607060706070607060706FD23FF0607060706%FFFFFF06FFFFFF06FD06FF0706FF0607FD15FF0600280607060706070607%FD04D7FD14FF05000506070606060706060607FD23FF07FFFFFF07FFFFFF%07FFFFFF07FD05FF0606FFFFFF06FD15FF0005000506060607060606D7D7%D7D3FD14FF050600070607060706070028FD0CFF060706FD15FF06FFFFFF%06FFFFFF06FFFFFF06FD05FF06FD04FF07FD16FF00280506002806070607%FFD7D7D7FD15FF0005060706050005FD0AFF060706060607FF06FD0CFF06%07FFFFFF0706060607FFFFFF07FF060607FFFFFF070606FFFFFF06FFFFFF%0606FD19FF00050005000500FD19FF2805060028FD0CFF0607FFFF0607FF%FF0607FF070607FD06FF06070607060706FFFF0706FFFFFF060706FF06FF%FFFF06FF0607FFFF06FFFFFF0607FD12FF06070607FD07FF28FD20FF0706%0606FD08FF0706FFFF0706FFFF07060606070606FD04FF0607FFFF0607FD%0AFF06FD09FF0606FF0706FFFFFF0606060706060607FF0606FD08FF07FF%FF06070606FD24FF0706FFFF0706FD07FF0607FFFF0607FFFF0607FD04FF%0607FFFF0607FD04FF06FD0DFF06FD07FF06FFFF07FD04FF06FFFF07FFFF%0607060706FD06FF0706FD05FF0607FF07060706FD1EFF06FFFFFF0607FF%FFFF070606060706FD0DFF06FFFF06FD04FF0607FD05FF06FD07FF06FD07%FF06FF0706FD0EFF0706FFFF0706060607FD06FF06FF06FFFF0706D7D3D7%D7FD18FF06FD04FF0706FFFF0706FFFFFF06FD0EFF07FF0706FFFFFF0607%0607FD04FF06FD06FF0706FFFFFF06FFFFFF06FF0607FD0EFF0607060706%FFFFFF06FD06FF070607FFFFFF07FD04D7FD17FF0607FFFFFF0706FF0607%06FD0CFF060607FD04FF06FF06FFFFFF06070606FD05FF07FD05FF060607%FFFFFF07FFFFFF07FF06FD05FF07FD0AFF0607FD05FF06FD05FF07060606%FFFFFF06FFD7D7D3FD17FF07FFFFFF070607060706FD06FF07FFFF0607FF%FF0607FD05FF07FF07FFFFFF07FD08FF06FD0BFF06FFFF0706FF06FFFFFF%06FD05FF06FFFF07FFFFFF0706FD0BFF06070607FFFFFF07FD1AFF0606FF%FFFF060706FD0CFF0606FFFF06FD06FF06FF06FD0CFF07FD0BFF07FFFF06%07FF06FD0CFF06FFFFFF06FF0606FD0AFF060606FFFF0606FD1AFF06FFFF%FF0607FD07FF07FD06FF0607FD09FF07FF07FD05FF07FFFFFF07FFFF06FF%FF07FFFFFF0706FFFFFF06FFFF0706FF0607FD04FF06FD06FF07FFFF0607%0607FD0BFF070607FFFF06FD1AFF0607FFFFFF07FD08FF06FD06FF0706FD%08FF0606FF06060607060606070606060706060607060606070606060706%06060706FFFFFF06FFFF070606FD06FF06FFFF070606FD0CFF060706FFFF%07FD1AFF0706FFFF070607FD0AFF06FFFFFF0607FFFF06070607060706FD%22FF07060706FF0607060706FF0607FFFF060706FD0CFF0706FFFFFF06FD%1AFF06FFFFFF0607FD05FF06FD04FF060706FF0607060606070606FD2DFF%0706060607060606070606FD0CFF060706FFFF07FD1AFF07FD07FF07FFFF%0607FF070607FF070607FD3EFF0607060706FD08FF070607FFFF06FD1AFF%06FD06FF070606060706060607FD47FF070606060706FFFFFF0606FFFFFF%0606FD19FF0706FFFFFF060706FF0607FD4FFF0706070607060706FD04FF%07FD1AFF0606070606FD58FF06FFFF0606070606FDFCFFFD0DFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 25 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			0			6 packedarray		} bind def		/findrgbcustomcolor		{			1			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop 			0 eq			{				pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				pop				3				{					1 exch sub					3 index mul 					1 exch sub					3 1 roll				} repeat				4 -1 roll pop				setrgbcolor			} ifelse		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_screens_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)%%Version: 1.2 0%%CreationDate: (03/24/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackingsystemdict beginuserdict /Adobe_screens_AI5 15 dict dup beginput/initialize{	Adobe_screens_AI5 begin	/screenid		deviceDPI 600 gt composite? not or		{		-1		}		{			deviceDPI currentScreenFreq 			dup dup 60 ge exch 150 le and deviceDPI 300 le and		{			pop 60		} if		div 1.41421 div 0.5 add cvi		} ifelse	def		2 screenid eq	{		/customsize 16 def		/customdata /customdata2 def		setcustomscreen	} if		3 screenid eq	{		/customsize 24 def		/customdata /customdata3 def		setcustomscreen	} if		4 screenid eq	{		/customsize 16 def		/customdata /customdata4 def		setcustomscreen	} if		5 screenid eq	{		/customsize 20 def		/customdata /customdata5 def		setcustomscreen	} if		6 screenid eq	{		/customsize 24 def		/customdata /customdata6 def		setcustomscreen	} if		7 screenid eq	{		/customsize 28 def		/customdata /customdata7 def		setcustomscreen	} if		8 screenid eq	{		/customsize 16 def		/customdata /customdata8 def		setcustomscreen	} if} def/terminate{	currentdict Adobe_screens_AI5 eq	{	 end	} if} def/setcustomscreen{	deviceDPI customsize div 0	{		1 add 2 div customsize mul cvi exch		1 add 2 div customsize mul cvi exch		customsize mul add		customdata load exch get 256 div	} setscreen} def/customdata2 28 28 mul string defcurrentfile customdata2 readhexstring4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECDF3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD044483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CFF0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata3 28 28 mul string defcurrentfile customdata3 readhexstring011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F688AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A125998DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A479336B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A177306989C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A115897DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A336C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata4 28 28 mul string defcurrentfile customdata4 readhexstring1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A32C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4CC38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata5 28 28 mul string defcurrentfile customdata5 readhexstring010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B112654A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A9937047334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E092351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B07204EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C29E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9FDAF3E2BA681C07214FA0DBF5E1B8671A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata6 28 28 mul string defcurrentfile customdata6 readhexstring081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A8190ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BDE4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B04071943B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B4864798091AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BEE4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A03061842B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC452280100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata7 28 28 mul string defcurrentfile customdata7 readhexstring01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F05122953A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D73372318253A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CEECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D33161E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E4350657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C220D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F64798499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F360E04112952A5CFEDFAF0DBB25E350Epop pop/customdata8 28 28 mul string defcurrentfile customdata8 readhexstring050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F132939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634BB8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADAF0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFCFFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB96775131210B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			currentoverprint{				rectImage			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					] /DeviceCMYK {}				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					false					currentpagedevice/SeparationOrder get{name eq or}forall					not				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse}def/initializeMultiPassSeps{	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	pt	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 200 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						_inRipSep currentoverprint not and or and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		pop	}{		/_useShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentoverprint where{		pop	}{		/currentoverprint {			false		}def	}ifelse	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			/Function 				bd					/FunctionType 3					/Domain [0 1]					/Functions _rampFuncsArray					/Bounds _boundsArray					/Encode _encodeArray				ed			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			/Function 				bd					/FunctionType 3					/Domain [0 1]					/Functions _rampFuncsArray					/Bounds _boundsArray					/Encode _encodeArray				ed			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			_rampFuncsArray _index		bd			/FunctionType 2			/Domain [0 1]			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div			_gradType 0 eq{				_invert{/C1}{/C0}ifelse _C0				_invert{/C0}{/C1}ifelse _C1			}{				_invert{/C0}{/C1}ifelse _C1				_invert{/C1}{/C0}ifelse _C0			}ifelse		ed		put				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			setrgbcolor 4 npop		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			3 -1 roll pop pop			1 exch sub /_tmp xp			3{				1 exch sub _tmp mul 1 exch sub 3 1 roll			}repeat			setrgbcolor 			4 npop		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _usingSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_firstShell true pt	_enabledSmoothShade not{		fill	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{			radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt	_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			true		_producingSeps{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_useShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_useShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_useShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_useShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 24 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 15 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null def	/XIVersion 6 defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null defcurrentdict /_colorimage known not{	/colorimage where	{		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def/WalkRGBString{	0 3 index	dup length 1 sub 0 3 3 -1 roll	{		3 getinterval { } forall		5 index exec		3 index	} for		 5 { pop } repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll	{		4 getinterval { } forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/ColorImageCompositeEmulator{	pop true eq	{		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load		 end		} if		image	} ifelse} def/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			sourcearray plateindex get exec		}		{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub			{				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/FourEqual{	4 index ne	{		pop pop pop false	}	{		4 index ne		{			pop pop false		}		{			4 index ne			{				pop false			}			{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index dup 		8 eq exch 1 eq or not end		{		/_colorimage load null ne		{			_colorimage		}		{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				dup 1 eq				{					pop pop image				}				{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			dup 1 eq			{				pop pop				image			}			{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0					{									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/XG{	pop pop} def/XF{	13 {pop} repeat} def/Xh{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH{	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def		XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			XIVersion 6 le			{				currentfile 128 string readline pop pop			}			if		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				XIVersion 6 le		{			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIMask			{				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load			imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						XIChannelCount 1 eq			{				gsave				0 setgray				image				grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)%%Version: 1.2 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 107 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XA{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/_rgbtocmyk{3	{	1 exch sub 3 1 roll	} repeat3 copy 1 4 1 roll3	{	3 index 2 copy gt		{		exch		} if	pop 4 1 roll	} repeatpop pop pop4 1 roll3	{	3 index sub	3 1 roll	} repeat4 -1 roll} def/Xx{	exch	/_gf exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_screens_AI5 /initialize get execuserdict begin /_useSmoothShade true def endAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec2 Bn%AI5_BeginGradient: (Borders UPPERMOST Gradient)(Borders UPPERMOST Gradient) 0 2 Bd[<DBDBDBDBDBDBDADADADADADADAD9D9D9D9D9D9D9D8D8D8D8D8D8D8D7D7D7D7D7D7D7D6D6D6D6D6D6D6D5D5D5D5D5D5D5D4D4D4D4D4D4><B8B7B6B5B4B3B2B1B0AFADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878685848382><030302020202020202020202020202020202020202020101010101010101010101010101010101010101010000000000000000000000>01 %_Br[0.83 0.51 0 0 1 50 100 %_Bs0.86 0.72 0.01 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient)(Unnamed gradient) 0 2 Bd[<DEDEDEDEDEDEDEDEDEDEDEDEDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFE0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5><BDBCBCBCBBBBBABABAB9B9B8B8B8B7B7B6B6B6B5B5B4B4B4B3B3B2B2B2B1B1B0B0B0AFAFAEAEAEADADACACACABABAAAAAAA9A9A8A8A8A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9A9A9A9999989898979796969695959494939393929291919190908F8F8F8E8E8D8D8D8C8C8B8B8A8A8A898988888887><0D0D0D0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0909090909090909090908080808080808080808080707070707070707070706060606060606060606050505050505050505050504040404040404040404030303030303030303030202020202020202020201010101010101010101000000000000><8281807F7E7D7C7B7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1 %_Br[0.9 0.53 0 0 1 50 100 %_Bs0.87 0.74 0.05 0.51 1 50.5618 0 %_BsBD%AI5_EndGradient%AI5_BeginPalette0 0 PbPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Au1 Ap0 O800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR64.9022 419.3505 m72.0758 426.6297 L48.8807 465.8996 L41.647 458.6092 L64.9022 419.3505 LBb1 (Unnamed gradient) 78 620 -77.2436 54.3415 1.1656 -0.0446 0.0446 1.1656 -899.5575 -342.1025 Bg16.3499 -61.242 -24.9422 -6.6589 62.2281 472.559 Xm3629.7301 -13595.9309 -24.9422 -6.6589 -3567.502 14068.49 Bc16.3499 -61.242 -24.9422 -6.6589 62.2281 472.559 Bm3629.7301 -13595.9309 -24.9422 -6.6589 78.578 411.3171 Bcf0 BB386.1096 484.3091 m394.9545 489.0474 L395.8539 494.2232 L387.0085 489.4606 L386.1096 484.3091 LBb1 (Unnamed gradient) 370 643 -105.7795 23.9008 1.1664 0 0 1.1664 -708.5299 -530.4616 Bg-7.581 -26.8271 -11.9563 3.3787 398.6514 493.5513 Xm-3826.5133 -13541.0741 -11.9563 3.3787 4225.1647 14034.6254 Bc-7.581 -26.8271 -11.9563 3.3787 398.6514 493.5513 Bm-3826.5133 -13541.0741 -11.9563 3.3787 391.0704 466.7242 Bcf0 BB286.3841 483.8474 m295.3507 488.513 L330.9255 529.5063 L322.1776 524.8408 L286.3841 483.8474 LBb1 (Unnamed gradient) 297 676 -112.3802 36.7695 1.1664 0 0 1.1664 -704.1316 -535.5888 Bg-16.3296 -39.6573 -26.3234 10.8392 333.5427 529.7353 Xm-5357.7059 -13011.472 -26.3234 10.8392 5691.2486 13541.2074 Bc-16.3296 -39.6573 -26.3234 10.8392 333.5427 529.7353 Bm-5357.7059 -13011.472 -26.3234 10.8392 317.2131 490.0781 Bcf0 BB513.6822 468.7331 m522.4664 473.4903 L518.5664 457.6525 L509.8185 453.0599 L513.6822 468.7331 LBb1 (Unnamed gradient) 479.5 632.5 -109.8318 32.423 1.1664 0 0 1.1664 -705.2009 -529.198 Bg-12.83 -35.575 -12.2471 4.4169 528.9955 479.6941 Xm-4773.8006 -13236.7868 -12.2471 4.4169 5302.7961 13716.4809 Bc-12.83 -35.575 -12.2471 4.4169 528.9955 479.6941 Bm-4773.8006 -13236.7868 -12.2471 4.4169 516.1655 444.1192 Bcf0 BB515.1402 341.8895 m523.9852 346.555 L494.2184 355.9589 L485.4947 351.3421 L515.1402 341.8895 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1664 0 0 1.1664 -706.0756 -528.9064 Bg-2.9149 148.715 43.0465 0.8437 483.1564 351.3765 Xm-275.7553 14068.6535 43.0465 0.8437 758.9117 -13717.277 Bc-2.9149 148.715 43.0465 0.8437 483.1564 351.3765 Bm-275.7553 14068.6535 43.0465 0.8437 480.2415 500.0915 Bcf0 BB466.3216 452.8963 m475.0459 457.5066 L467.8997 459.1217 L459.0839 454.5652 L466.3216 452.8963 LBb1 (Unnamed gradient) 425.5 597.5 43.0521 52.0024 1.1664 0 0 1.1664 -705.2009 -529.198 Bg44.323 41.4069 9.1565 -9.8013 450.8851 450.0983 Xm10282.455 9605.9529 9.1565 -9.8013 -9831.5699 -9155.8546 Bc44.323 41.4069 9.1565 -9.8013 450.8851 450.0983 Bm10282.455 9605.9529 9.1565 -9.8013 495.2081 491.5052 Bcf0 BB285.801 472.6697 m293.4435 476.7399 L287.1861 471.7219 L278.2924 466.9835 L285.801 472.6697 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1664 0 0 1.1664 -711.6889 -531.6765 Bg-2.9149 148.715 20.001 0.392 278.2432 350.2402 Xm-275.7553 14068.6535 20.001 0.392 553.9985 -13718.4133 Bc-2.9149 148.715 20.001 0.392 278.2432 350.2402 Bm-275.7553 14068.6535 20.001 0.392 275.3282 498.9552 Bcf0 BB485.233 362.9708 m493.9266 367.6227 L494.2184 355.9589 L485.4947 351.3421 L485.233 362.9708 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1664 0 0 1.1664 -705.7113 -529.0522 Bg-2.9149 148.715 13.5092 0.2648 483.1199 351.5144 Xm-275.7553 14068.6535 13.5092 0.2648 758.8752 -13717.139 Bc-2.9149 148.715 13.5092 0.2648 483.1199 351.5144 Bm-275.7553 14068.6535 13.5092 0.2648 480.205 500.2295 Bcf0 BB459.0839 454.5652 m467.8997 459.1217 L467.4853 485.6243 L458.7646 480.8105 L459.0839 454.5652 LBb1 (Unnamed gradient) 437.5 630.5 -121.3283 26.9258 1.1664 0.0097 -0.0097 1.1664 -665.5127 -572.23 Bg-16.5525 -26.6916 -20.2773 12.5748 480.538 475.0747 Xm-7416.2936 -11959.0713 -20.2773 12.5748 7896.8316 12434.146 Bc-16.5525 -26.6916 -20.2773 12.5748 480.538 475.0747 Bm-7416.2936 -11959.0713 -20.2773 12.5748 463.9855 448.3831 Bcf0 BB0.9 0.94 0 0.32 k456.682 367.0694 m465.4042 371.668 L474.9925 457.4828 L466.3216 452.8963 L456.682 367.0694 Lf485.233 362.9708 m493.9266 367.6227 L465.4042 371.668 L456.682 367.0694 L485.233 362.9708 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1664 0 0 1.1664 -706.0756 -528.9064 Bg-2.9149 148.715 41.9057 0.8214 454.6629 350.818 Xm-275.7553 14068.6535 41.9057 0.8214 730.4182 -13717.8355 Bc-2.9149 148.715 41.9057 0.8214 454.6629 350.818 Bm-275.7553 14068.6535 41.9057 0.8214 451.748 499.533 Bcf0 BB438.5237 363.6132 m447.1256 368.3517 L404.1643 375.9331 L395.4164 371.2433 L438.5237 363.6132 LBb1 (Unnamed gradient) 368 524 92.3666 121.1033 1.1664 0 0 1.1664 -710.1581 -533.5719 Bg-5.8319 141.1344 56.1637 2.3208 393.5415 360.3058 Xm-580.9629 14059.4494 56.1637 2.3208 974.5044 -13699.1436 Bc-5.8319 141.1344 56.1637 2.3208 393.5415 360.3058 Bm-580.9629 14059.4494 56.1637 2.3208 387.7096 501.4403 Bcf0 BB395.4164 371.2433 m404.1643 375.9331 L401.9286 395.1055 L393.1078 390.367 L395.4164 371.2433 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1664 0 0 1.1664 -709.8665 -534.1551 Bg-2.9149 148.715 15.4341 0.3025 391.4656 354.9023 Xm-275.7553 14068.6535 15.4341 0.3025 667.2209 -13713.7512 Bc-2.9149 148.715 15.4341 0.3025 391.4656 354.9023 Bm-275.7553 14068.6535 15.4341 0.3025 388.5507 503.6173 Bcf0 BB387.1787 378.7761 m395.878 383.5632 L386.1337 401.715 L377.3861 396.8551 L387.1787 378.7761 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1664 0 0 1.1664 -709.9635 -534.1551 Bg-2.9149 148.715 22.889 0.4486 375.8771 354.5986 Xm-275.7553 14068.6535 22.889 0.4486 651.6324 -13714.0548 Bc-2.9149 148.715 22.889 0.4486 375.8771 354.5986 Bm-275.7553 14068.6535 22.889 0.4486 372.9622 503.3137 Bcf0 BB375.2476 383.4417 m383.8739 388.083 L346.0396 394.0607 L337.3161 389.5166 L375.2476 383.4417 LBb1 (Unnamed gradient) 368 524 92.3666 121.1033 1.1664 0 0 1.1664 -709.7693 -534.3495 Bg-5.8319 141.1344 51.0812 2.1108 336.2624 358.7005 Xm-580.9629 14059.4494 51.0812 2.1108 917.2252 -13700.7489 Bc-5.8319 141.1344 51.0812 2.1108 336.2624 358.7005 Bm-580.9629 14059.4494 51.0812 2.1108 330.4304 499.8349 Bcf0 BB337.3161 389.5166 m346.0396 394.0607 L361.5428 489.0476 L352.892 484.285 L337.3161 389.5166 LBb1 (Unnamed gradient) 329.5 594 5.194 38.6587 1.1664 0 0 1.1664 -709.7693 -534.3495 Bg44.9062 4.082 9.1971 -101.1776 338.2177 489.3115 Xm14013.6109 1273.8464 9.1971 -101.1776 -13675.3932 -784.535 Bc44.9062 4.082 9.1971 -101.1776 338.2177 489.3115 Bm14013.6109 1273.8464 9.1971 -101.1776 383.1239 493.3935 Bcf0 BB292.6414 476.3753 m301.45 480.883 L295.3507 488.44 L286.3841 483.7745 L292.6414 476.3753 LBb1 (Unnamed gradient) 277.5 614 34.4302 75.1681 1.1664 0 0 1.1664 -704.1316 -535.5159 Bg72.3156 49.5722 8.8028 -12.8415 277.9542 480.8242 Xm11606.1886 7956.0268 8.8028 -12.8415 -11328.2344 -7475.2026 Bc72.3156 49.5722 8.8028 -12.8415 277.9542 480.8242 Bm11606.1886 7956.0268 8.8028 -12.8415 350.2698 530.3964 Bcf0 BB241.1885 399.2147 m249.8524 403.9279 L320.2127 369.0864 L311.4695 364.4015 L241.1885 399.2147 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1651 0.056 -0.056 1.1651 -472.7954 -766.5765 Bg4.2264 148.6897 84.4799 -2.4013 237.4755 351.4498 Xm399.8258 14066.2602 84.4799 -2.4013 -162.3504 -13714.8103 Bc4.2264 148.6897 84.4799 -2.4013 237.4755 351.4498 Bm399.8258 14066.2602 84.4799 -2.4013 241.7019 500.1395 Bcf0 BB237.1289 473.7631 m245.9497 478.5744 L256.52 498.6945 L247.7722 493.9561 L237.1289 473.7631 LBb1 (Unnamed gradient) 253 648 -113.703 22.3886 1.1664 0 0 1.1664 -710.4983 -531.6765 Bg-10.4977 -23.9109 -11.3525 4.9842 259.5105 499.7032 Xm-5656.6554 -12884.2729 -11.3525 4.9842 5916.166 13383.976 Bc-10.4977 -23.9109 -11.3525 4.9842 259.5105 499.7032 Bm-5656.6554 -12884.2729 -11.3525 4.9842 249.0128 475.7923 Bcf0 BB207.4551 364.0515 m216.3191 368.7269 L249.9334 373.7179 L240.9936 368.9938 L207.4551 364.0515 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1663 0.0182 -0.0182 1.1663 -635.481 -613.9349 Bg-0.5935 148.7481 47.1816 0.1882 205.1484 354.4985 Xm-56.145 14071.783 47.1816 0.1882 261.2934 -13717.2845 Bc-0.5935 148.7481 47.1816 0.1882 205.1484 354.4985 Bm-56.145 14071.783 47.1816 0.1882 204.5549 503.2466 Bcf0 BB207.4551 364.0515 m216.3191 368.7269 L207.8987 459.2069 L199.2612 454.5384 L207.4551 364.0515 LBb1 (Unnamed gradient) 227 572.5 -167.735 35.3058 1.1663 0.0182 -0.0182 1.1663 -635.481 -613.9349 Bg-40.3736 -8.1191 -19.2945 95.9449 232.1538 366.639 Xm-13795.6611 -2774.3016 -19.2945 95.9449 14027.8149 3140.9407 Bc-40.3736 -8.1191 -19.2945 95.9449 232.1538 366.639 Bm-13795.6611 -2774.3016 -19.2945 95.9449 191.7802 358.5199 Bcf0 BB191.0329 452.4524 m199.8292 457.118 L198.5414 482.7054 L189.7935 477.967 L191.0329 452.4524 LBb1 (Unnamed gradient) 201.5 635.5 -88.3406 34.5145 1.1664 0 0 1.1664 -709.5749 -532.2355 Bg1.1655 -40.2407 -14.0874 -0.408 201.2031 488.979 Xm407.3758 -14065.5236 -14.0874 -0.408 -206.1727 14554.5025 Bc1.1655 -40.2407 -14.0874 -0.408 201.2031 488.979 Bm407.3758 -14065.5236 -14.0874 -0.408 202.3686 448.7382 Bcf0 BB0 Ap119.848 344.0572 m111.0788 338.2008 L146.6611 349.6562 L155.544 355.4339 L119.848 344.0572 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1656 -0.0446 0.0446 1.1656 -897.7834 -342.6615 Bg-8.5988 148.5029 49.9693 2.8934 108.2677 346.1874 Xm-813.4588 14048.5888 49.9693 2.8934 921.7265 -13702.4014 Bc-8.5988 148.5029 49.9693 2.8934 108.2677 346.1874 Bm-813.4588 14048.5888 49.9693 2.8934 99.6689 494.6903 Bcf0 BB80.9303 430.8377 m73.6458 423.095 L111.0788 338.2008 L119.848 344.0572 L80.9303 430.8377 LBb1 (Unnamed gradient) 118 540.5 109.7163 91.8872 1.1656 -0.0446 0.0446 1.1656 -899.922 -341.8839 Bg-39.9903 99.4416 16.7388 6.7315 90.1412 375.8247 Xm-5250.3878 13055.8332 16.7388 6.7315 5340.529 -12680.0085 Bc-39.9903 99.4416 16.7388 6.7315 90.1412 375.8247 Bm-5250.3878 13055.8332 16.7388 6.7315 50.1509 475.2663 Bcf0 BB176.1351 372.7696 m166.9423 375.4326 159.5658 381.811 155.3645 390.7299 c153.2203 395.2793 151.2728 405.4812 151.1567 410.5277 C149.1599 408.2209 145.0925 405.7393 142.1761 404.3214 C144.0929 394.3326 146.5641 387.3407 v149.0356 380.349 154.9216 374.698 Y158.7076 371.0414 163.3153 368.3554 168.5019 366.8527 c178.4312 363.9766 189.651 365.8428 199.2849 371.9729 c201.791 373.5758 205.2271 376.1293 207.3253 378.1568 C197.8562 372.3876 185.8168 369.9654 176.1351 372.7696 cBb1 (Unnamed gradient) 182.5 523 104.5346 97.6243 1.1524 -0.1803 0.1803 1.1524 -1404.1856 283.5521 Bg-45.2728 104.4855 52.5578 22.7729 159.3256 350.7326 Xm-5594.6216 12911.8825 52.5578 22.7729 5753.9473 -12561.1499 Bc-45.2728 104.4855 52.5578 22.7729 159.3256 350.7326 Bm-5594.6216 12911.8825 52.5578 22.7729 114.0528 455.2182 Bcf0 BB1 Ap191.0329 452.4524 m199.2612 454.5384 L207.8987 459.2069 L199.8292 457.118 L191.0329 452.4524 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1664 0 0 1.1664 -709.5749 -532.2355 Bg-2.9149 148.715 21.6563 0.4245 190.7228 349.0423 Xm-275.7553 14068.6535 21.6563 0.4245 466.4781 -13719.6112 Bc-2.9149 148.715 21.6563 0.4245 190.7228 349.0423 Bm-275.7553 14068.6535 21.6563 0.4245 187.8079 497.7573 Bcf0 BB64.9022 419.3505 m72.0758 426.6297 L80.9303 430.8377 L73.6458 423.095 L64.9022 419.3505 LBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1664 0 0 1.1664 -719.1246 -529.4408 Bg-2.9149 148.715 20.9116 0.4099 64.0436 343.9518 Xm-275.7553 14068.6535 20.9116 0.4099 339.7989 -13724.7017 Bc-2.9149 148.715 20.9116 0.4099 64.0436 343.9518 Bm-275.7553 14068.6535 20.9116 0.4099 61.1287 492.6668 Bcf0 BBu0 Ap444.6929 383.0438 m445.1901 378.868 L448.2487 379.23 451.4855 379.6277 454.2267 380.5831 c457.4361 381.7015 464.4006 384.772 467.0555 387.1054 C466.0755 386.7281 461.365 384.5537 460.3509 384.2483 c455.1527 382.6952 449.7245 382.5032 444.6929 383.0438 CBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.1632 0.0872 -0.0872 1.1632 -331.4799 -902.619 Bg8.2116 148.5243 26.7291 -1.4778 440.6184 351.5652 Xm776.8256 14050.6126 26.7291 -1.4778 -336.2072 -13699.0473 Bc8.2116 148.5243 26.7291 -1.4778 440.6184 351.5652 Bm776.8256 14050.6126 26.7291 -1.4778 448.83 500.0895 Bcf0 BBUu320.0655 402.7987 m320.1959 398.0141 L327.3848 399.0657 333.5645 401.7412 339.647 405.3882 c343.4452 407.6657 347.6601 411.0946 348.958 412.0127 C348.0214 411.415 347.0777 411.0527 346.1118 410.5222 c340.4815 407.4308 325.4114 402.8896 320.0655 402.7987 CBb1 (Unnamed gradient) 315.5 518 91.1234 127.5245 1.3092 -0.0232 0.0215 1.4152 -1418.5777 -1472.3162 Bg-6.0127 180.3802 34.4251 1.3396 319.3144 347.4379 Xm-568.8139 17064.22 34.4251 1.3396 888.1283 -16716.7821 Bc-6.0127 180.3802 34.4251 1.3396 319.3144 347.4379 Bm-568.8139 17064.22 34.4251 1.3396 313.3017 527.818 Bcf0 BBU*u0 0.2 1 0 k1 D522.4205 473.3834 m518.5826 457.5619 L515.0343 475.1034 L467.527 485.5538 L467.8749 459.1477 L475.0295 457.5553 L474.4932 452.7795 L474.4241 452.817 474.3579 452.8585 474.2882 452.8954 c465.4338 457.5965 454.4338 458.062 444.0658 454.1559 c440.6078 452.8324 437.3846 451.0674 434.4398 448.9659 C427.3025 494.1948 L395.7045 494.1948 L394.8198 489.0078 L361.5785 489.0078 L357.7737 465.7338 L355.0112 469.1336 L346.9543 479.0489 335.2792 484.5055 322.3428 484.7776 C350.5625 499.9399 L330.8814 529.3234 L295.3062 488.3428 L301.4593 480.838 L295.8816 478.5671 291.0255 475.4422 287.0222 471.6582 C256.5271 498.7107 L245.8422 478.2703 L246.2592 497.9048 L198.5658 482.6848 L199.7825 457.0503 L207.8976 459.1675 L209.1064 446.1699 L199.842 450.3362 188.7106 450.2524 178.3706 445.8697 c175.3138 444.5552 172.4504 442.9089 169.8106 440.9975 C171.6031 448.9101 171.1785 456.7125 168.1656 463.6624 c164.6078 471.8694 158.3507 478.6653 150.6724 482.9472 C145.2899 486.5298 138.8715 488.7688 132.1467 489.5225 C115.6625 492.4149 95.8499 489.4434 76.3588 481.1553 c69.1892 478.1069 62.4971 474.617 56.4684 470.783 C48.8434 465.9339 L53.4454 458.1572 L67.7202 434.0348 L72.1075 426.6212 72.1283 426.6314 V79.8682 430.4134 L80.9442 430.9392 L116.4252 351.7104 L119.8356 344.0953 L127.7828 346.6363 L146.9972 352.7796 L155.411 355.4696 L153.1857 364.0182 L142.9857 403.1988 L145.926 405.3604 148.6609 407.6681 151.185 410.0844 C150.6255 405.3951 150.9129 400.6643 152.1912 396.1275 c154.8619 386.6377 161.0838 379.1293 169.7107 374.9852 c179.0285 370.5094 190.4024 370.4975 200.9156 374.9527 c206.1942 377.2045 210.8914 380.4495 214.8547 384.3503 C216.3043 368.7637 L249.9312 373.7036 L249.8866 403.8771 L320.168 369.1166 L320.168 402.7707 L323.0074 402.9988 325.882 403.4454 328.7714 404.1418 c336.522 406.0098 343.1229 408.5869 349.0055 412.1021 C346.0549 394.0526 L383.9459 388.076 L386.0414 401.7285 L395.9399 383.4373 L401.9761 395.0952 L404.1837 375.9611 L447.1565 368.3797 L444.8745 382.8407 L450.7492 382.1792 456.9545 382.9533 462.9411 385.2084 c464.3756 385.7525 465.765 386.3804 467.1163 387.0682 C465.3877 371.6697 L493.9844 367.668 L494.2185 355.9419 L524.0168 346.5657 L562.8529 463.5753 L522.4205 473.3834 Lf0 D265.4558 437.4094 m274.4851 446.18 L274.0982 442.1355 274.3016 437.9328 275.1513 433.6478 C265.4558 437.4094 Lf354.1167 443.3658 m347.9149 448.9477 L354.5413 456.0049 L356.5293 458.1221 L354.1167 443.3658 Lf133.1892 429.4142 m131.8365 428.2024 L131.2974 429.9367 L125.7948 447.8925 L125.4324 449.1328 125.4324 449.1329 V126.7033 449.3668 L129.5765 449.8956 132.2685 449.6177 134.4878 448.5635 c135.82 447.9305 138.1367 446.4364 138.6793 443.5413 c139.7151 438.0143 138.0733 433.7895 133.1892 429.4142 Cf307.6938 441.3238 m306.6492 440.1316 L305.8883 441.5221 L303.46 445.9592 304.1192 451.445 307.5281 455.1727 c310.8354 458.7885 315.9312 459.9821 320.5106 458.2136 C321.99 457.6426 L320.9449 456.4499 L307.6938 441.3238 Lf*U0.11 0.0392 0.32 0.54 k336.4712 438.3555 m336.3594 438.2229 336.2452 438.0918 336.1318 437.9601 C336.2678 438.0717 336.4058 438.1816 336.5385 438.2952 C336.4712 438.3555 Lf349.9181 439.1672 m351.055 446.1214 L354.1167 443.3658 L347.9149 448.9477 L354.5413 456.0049 L352.2765 453.5929 L352.3307 453.9235 L350.3427 451.8063 L343.7163 444.7491 L349.9181 439.1672 Lf354.1167 443.3658 m356.5293 458.1221 L354.5413 456.0049 L347.9149 448.9477 L354.1167 443.3658 Lf265.4558 437.4094 m265.5444 437.3751 L265.5444 437.3751 L265.4558 437.4094 Lfu0 0.2 1 0.25 k302.1214 431.2567 m302.6586 430.7167 302.1577 431.1261 302.7666 430.7037 C306.8209 433.5646 L306.2121 433.987 305.6166 434.4378 305.0543 434.9516 c299.1912 440.3141 300.7053 452.347 304.541 458.9471 C294.4958 450.8513 295.0243 438.3961 302.1214 431.2567 cfu351.0362 424.5231 m344.3565 418.9992 336.7281 415.3843 326.6348 412.9517 c324.4418 412.4231 322.2836 412.0705 320.168 411.8643 c304.1669 410.3048 290.7529 417.6669 285.6435 429.5773 c285.0333 430.9999 284.5396 432.486 284.176 434.0305 c281.811 444.0767 283.8168 453.0386 288.7785 460.0639 c289.2605 460.7464 289.7812 461.4025 290.3186 462.0469 C290.0803 461.846 289.8313 461.655 289.5996 461.4486 c287.704 459.7613 286.0151 457.8973 284.58 455.8653 c279.6183 448.84 277.6124 439.8782 279.9773 429.832 c280.341 428.2874 280.835 426.8013 281.445 425.3787 c286.5545 413.4685 299.9682 406.1062 315.9694 407.6657 c318.085 407.8719 320.2432 408.2245 322.4362 408.7531 c332.5295 411.1857 340.1579 414.8006 346.8376 420.3245 c348.4749 421.6782 350.0569 423.1427 351.6021 424.7373 C351.4437 424.88 L351.3068 424.7641 351.1742 424.6371 351.0362 424.5231 cf256.1639 479.9573 m255.4428 480.6439 L238.199 456.4193 L238.2917 454.8498 L256.1639 479.9573 Lf352.3307 453.9235 m352.2765 453.5929 L354.5413 456.0049 L356.5293 458.1221 L354.1167 443.3658 L351.055 446.1214 L349.9181 439.1672 L343.7163 444.7491 L350.3427 451.8063 L352.3307 453.9235 Lf339.768 502.1303 m329.3644 516.2683 L325.4994 511.6162 L334.4273 499.4836 L339.768 502.1303 Lf159.6043 459.9509 m156.7761 466.4746 151.8964 471.5883 145.5022 475.1796 C140.8675 478.2644 135.5424 479.7582 130.5341 480.3319 C116.3262 482.825 98.6119 480.4781 80.01 472.5683 c73.3843 469.751 67.1705 466.531 61.4757 462.9094 C62.213 461.6633 L66.5099 464.1037 71.0492 466.3449 75.8114 468.3697 c94.4133 476.2795 112.1276 478.6263 126.3354 476.1333 C131.3438 475.5596 136.6689 474.0658 141.3035 470.9809 C147.6978 467.3898 152.5776 462.276 155.4057 455.7523 c160.4375 444.1461 155.9993 428.7617 144.1316 415.8531 C159.0156 429.4971 165.1943 447.0571 159.6043 459.9509 cf220.0848 422.0956 m219.9516 422.7403 219.8035 423.3827 219.6229 424.0197 c217.9705 429.8783 214.4925 434.525 209.8993 437.6425 c202.4741 442.6824 192.1281 443.7171 181.8231 439.3497 c176.3991 437.0173 171.6696 433.4139 167.936 429.0804 C170.8111 431.5481 174.0691 433.6223 177.6245 435.1511 c187.9295 439.5185 198.2755 438.4838 205.701 433.4439 c210.2938 430.3264 213.7719 425.6797 215.4243 419.821 c215.6049 419.1841 215.753 418.5417 215.8863 417.8971 c216.3481 415.6646 216.5324 413.3924 216.4571 411.1169 c216.2338 404.3495 213.7398 397.5667 209.5741 391.7891 c208.9256 390.8896 208.2228 390.0251 207.4956 389.1783 C209.8604 391.2115 211.9785 393.499 213.7727 395.9876 c217.9384 401.7653 220.4324 408.5481 220.6557 415.3156 c220.7307 417.5911 220.5464 419.8632 220.0848 422.0956 cf191.6309 430.6889 m191.5862 430.6291 195.8223 434.9 195.7691 434.9018 c190.4816 435.0864 188.2438 430.0987 188.063 429.699 C189.1421 430.2261 190.3461 430.5761 191.6309 430.6889 Cf201.5971 424.5868 m201.8123 423.8848 201.9375 423.1495 201.9375 422.3865 c201.9375 421.2796 201.6899 420.2255 201.2501 419.2589 C202.0923 419.6686 208.1974 422.6476 205.8203 428.9443 C205.9689 428.7408 201.4579 424.596 201.5971 424.5868 Cf177.5247 421.0854 m177.5247 423.6835 181.9476 429.9456 183.3272 432.0555 C176.3363 427.5991 173.326 421.5888 173.326 416.8867 c173.326 408.7505 180.4346 402.2429 188.9557 402.2429 c192.9925 402.2429 200.3589 404.374 205.1755 412.1928 C202.659 410.5301 196.2266 406.5387 192.8628 406.5387 c184.3416 406.5387 177.5247 412.9492 177.5247 421.0854 cf237.544 380.8893 m241.7548 381.4658 L241.7266 417.9688 L237.434 413.6641 L237.544 380.8893 Lf234.1661 449.1203 m238.2719 454.8884 L236.5276 484.7296 L207.5447 476.1033 L207.6769 473.1936 L232.3287 480.531 L234.1661 449.1203 Lfu259.6414 484.8425 m256.1639 479.9573 L276.5583 460.8204 L280.5052 464.9818 L259.6414 484.8425 Lf292.336 409.0344 m286.4611 412.6487 281.8152 417.5943 278.7398 423.3912 C251.3971 434.2122 L247.4354 430.0353 L274.5415 419.1924 L277.6165 413.3957 282.2624 408.4501 288.1375 404.8358 c293.8128 401.3441 300.2926 399.2573 307.1734 398.6123 C307.1734 385.2261 L311.372 383.1261 L311.372 402.8108 L304.4913 403.4559 298.0115 405.5427 292.336 409.0344 cfUu322.2744 429.0115 m328.9705 430.6253 332.8188 434.102 336.1318 437.9601 C333.6293 435.9028 330.5917 434.2026 326.473 433.2101 c324.1725 432.6554 321.0563 432.1403 319.0755 432.4853 C314.9531 428.0948 L316.8358 427.9375 319.9662 428.455 322.2744 429.0115 cf311.1977 474.4949 m304.4408 472.8661 298.4744 469.8096 293.7982 465.6471 c292.5392 464.5266 291.3813 463.3208 290.3186 462.0469 C294.8833 465.8979 300.577 468.7483 306.9991 470.2965 c322.2525 473.9725 335.6768 469.3136 343.9782 459.0327 C348.0909 463.4127 L339.8873 473.5086 326.4575 478.1726 311.1977 474.4949 cfU351.4437 424.88 m352.9344 426.1367 354.3859 427.4757 355.8007 428.9358 C352.2761 432.108 L340.6698 442.5541 L339.4053 441.0567 338.0719 439.609 336.5385 438.2952 C348.0778 427.9095 L351.4437 424.88 Lf435.5184 385.268 m434.6603 385.6311 433.8134 386.0189 432.9905 386.4559 c424.8722 390.7694 419.1926 398.2187 416.9989 407.4315 c414.158 419.3487 418.2726 432.3498 426.7784 442.0347 C420.0963 485.4352 L404.0168 485.4352 L403.2713 481.2367 L415.8979 481.2367 L422.5798 437.8361 L414.074 428.1513 409.9594 415.15 412.8003 403.2329 c414.994 394.0201 420.6736 386.5708 428.7919 382.2573 c429.6148 381.8202 430.4617 381.4325 431.3198 381.0695 C431.4217 380.4081 L436.3833 379.6504 L435.5184 385.268 Lf393.4942 445.6177 m397.6911 449.8775 L392.0809 480.5399 L369.5707 480.5399 L368.8673 476.3413 L387.8821 476.3413 L393.4942 445.6177 Lf396.0014 405.0596 m397.4052 402.0331 L406.3086 425.0968 L402.136 420.92 L396.0014 405.0596 Lf379.6825 426.6799 m375.145 398.06 L378.5831 397.462 L383.9073 430.9063 L379.6825 426.6799 Lf469.3383 440.0613 m471.8235 438.2828 473.9367 436.0299 475.5551 433.3657 c476.803 431.3118 477.7631 429.0203 478.3629 426.5088 c480.4384 417.8637 477.9537 408.5801 472.4953 401.098 c471.941 400.3383 471.3523 399.6002 470.7384 398.8802 C472.9815 400.7938 474.9853 402.9545 476.6939 405.2965 c482.1524 412.7787 484.637 422.0621 482.5612 430.7074 c481.9617 433.2189 481.0016 435.5103 479.7537 437.5643 c478.1353 440.2283 476.0221 442.4814 473.5369 444.2598 c466.6817 449.1657 457.0161 450.4601 447.1837 446.756 c442.9715 445.1439 439.1552 442.7336 435.8875 439.7913 c434.6852 438.7084 433.5793 437.5373 432.5354 436.3221 C435.6107 438.9314 439.1294 441.0817 442.9851 442.5575 c452.8175 446.2615 462.483 444.9671 469.3383 440.0613 cf454.7004 438.1954 m454.771 438.0058 458.8552 442.4224 458.9481 442.4262 c453.7853 442.2222 451.2984 439.7317 451.5597 438.5608 C451.2578 438.1357 450.9986 437.6847 450.7864 437.2105 C451.9015 437.7472 453.9364 438.1596 454.7004 438.1954 Cf464.4108 431.694 m464.5977 430.9838 464.6924 430.244 464.6616 429.4816 c464.6215 428.5018 464.384 427.5734 463.9996 426.7142 C464.7714 427.086 471.0168 429.0085 468.6491 435.8955 C468.7052 435.7108 464.3445 431.6726 464.4108 431.694 Cf450.683 409.7959 m456.5338 409.5585 462.9928 413.1696 467.6228 419.5211 C464.9444 417.7502 458.377 414.0431 454.7843 414.1889 c446.2704 414.5346 439.7191 421.2165 440.0492 429.3461 c440.1459 431.727 443.233 436.8528 444.487 438.7899 C439.9995 435.5165 436.0296 429.2634 435.8506 424.8559 c435.5205 416.7263 442.1689 410.1417 450.683 409.7959 cf528.0434 463.2135 m526.8706 458.3453 L547.4214 453.797 L515.8631 358.2096 L518.4227 357.4443 L551.62 457.9956 L528.0434 463.2135 Lf513.1698 414.7122 m517.3877 418.9662 L506.9483 468.3308 L475.9568 474.56 L475.6847 469.5722 L502.7497 464.1323 L513.1698 414.7122 Lf488.842 376.7958 m492.203 376.2615 L500.5218 423.1022 L496.2992 418.9477 L488.842 376.7958 Lf132.3469 407.2505 m127.712 403.999 l139.4428 360.0233 l144.6084 360.8767 l132.3469 407.2505 lf141.7291 430.354 m138.7984 427.2633 132.3329 421.2393 128.6357 418.8565 C126.3981 426.0518 L121.4921 441.8272 L118.3719 452.5004 l115.3188 448.5842 l118.4395 437.911 L123.3453 422.1358 L125.5828 414.9403 L130.6268 418.1913 137.9809 424.2998 141.7291 430.354 CfUU0.11 0.0392 0.32 0.54 k321.1228 457.5052 m317.1263 459.0484 311.4718 458.5892 308.4059 455.2373 c307.6923 454.457 306.3347 452.4966 305.8949 451.5923 C308.8357 453.9427 314.118 454.4484 317.5588 453.2123 C321.1228 457.5052 Lf138.0649 443.2494 m137.6173 445.6363 135.3091 447.4905 134.177 448.0283 c132.1428 448.9948 128.6491 449.1497 126.0771 448.6764 C126.5423 447.0846 127.0747 445.2086 127.2921 444.4644 C128.3271 444.3244 130.0388 444.0192 130.9342 443.5939 c132.0662 443.0562 134.0325 441.7974 134.4799 439.4103 c135.0751 436.2344 134.9281 433.2812 133.61 430.8565 C137.2246 434.4177 138.992 438.303 138.0649 443.2494 cfq326.5182 458.9337 m320.1523 464.7557 310.2716 464.315 304.4495 457.9491 c298.6275 451.5832 299.0682 441.7025 305.4337 435.8803 c305.963 435.3965 306.5236 434.9721 307.097 434.5745 C327.6213 457.8173 L327.2757 458.2032 326.9087 458.5765 326.5182 458.9337 chWnQ0 Aq800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR143.7577 444.3365 m142.1119 453.1172 130.6398 457.9649 119.2413 451.76 C122.1791 441.7111 L126.7982 426.8584 L128.9048 420.0839 L137.441 425.5856 146.0364 432.1794 143.7577 444.3365 chWnQ0 A*u0 O800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:1 D0 XR0 g144.4114 443.3196 m142.6634 452.6459 130.4785 457.7949 118.3719 451.2044 C121.4921 440.5312 L126.3981 424.7558 L128.6357 417.5605 L137.7024 423.404 146.8316 430.4074 144.4114 443.3196 cf0 D132.4111 428.987 m131.0693 433.3017 128.1748 442.6093 Y128.1899 442.5588 127.5895 444.6141 126.9144 446.9236 C129.4863 447.3971 131.953 447.1805 133.9871 446.2141 c135.1193 445.6763 137.0854 444.4175 137.5332 442.0305 c138.5376 436.6703 136.7127 432.8404 132.4111 428.987 CBb1 (Borders UPPERMOST Gradient) 312.4417 534.2165 90.6041 136.7911 1.1655 -0.0468 0.0468 1.1655 -908.5484 -333.1973 Bg-8.0819 159.3545 31.9942 1.6226 120.2258 367.9047 Xm-712.7654 14053.9275 31.9942 1.6226 832.9912 -13686.0228 Bc-8.0819 159.3545 31.9942 1.6226 120.2258 367.9047 Bm-712.7654 14053.9275 31.9942 1.6226 112.1439 527.2592 Bcf0 BB*U*u1 D0 g327.4486 458.1409 m320.6873 464.3248 310.1929 463.8566 304.0088 457.0953 c297.8251 450.334 298.2931 439.8394 305.0543 433.6556 c305.6166 433.1418 306.2121 432.691 306.8209 432.2687 C328.6203 456.9553 L328.2531 457.3654 327.8633 457.7617 327.4486 458.1409 cf0 D306.8603 440.7581 m304.7213 444.6666 305.1713 449.6575 308.3459 453.1288 c311.4117 456.4808 316.1151 457.4273 320.1115 455.8842 C306.8603 440.7581 LBb1 (Borders UPPERMOST Gradient) 312.4417 534.2165 90.6041 136.7911 1.1074 -0.0346 0.0346 1.1074 -600.1326 -144.4531 Bg-6.3307 151.4249 35.4456 1.4819 298.5858 378.2762 Xm-558.3202 13354.599 35.4456 1.4819 856.9061 -12976.3228 Bc-6.3307 151.4249 35.4456 1.4819 298.5858 378.2762 Bm-558.3202 13354.599 35.4456 1.4819 292.2551 529.7012 Bcf0 BB*U0.87 0.74 0.05 0.5 k3 w356.5856 460.8539 m344.533 449.1901 l356.0024 438.887 l356.5856 460.8539 lfu*u1 w1 D0 g522.4205 473.3834 m518.5826 457.5619 L515.0343 475.1034 L467.527 485.5538 L467.8749 459.1477 L475.0295 457.5553 L474.4932 452.7795 L474.4241 452.817 474.3579 452.8585 474.2882 452.8954 c465.4338 457.5965 454.4338 458.062 444.0658 454.1559 c440.6078 452.8324 437.3846 451.0674 434.4398 448.9659 C427.3025 494.1948 L395.7045 494.1948 L394.8198 489.0078 L361.5785 489.0078 L357.7737 465.7338 L355.0112 469.1336 L346.9543 479.0489 335.2792 484.5055 322.3428 484.7776 C350.5625 499.9399 L330.8814 529.3234 L295.3062 488.3428 L301.4593 480.838 L295.8816 478.5671 291.0255 475.4422 287.0222 471.6582 C256.5271 498.7107 L245.8422 478.2703 L246.2592 497.9048 L198.5658 482.6848 L199.7825 457.0503 L207.8976 459.1675 L209.1064 446.1699 L199.842 450.3362 188.7106 450.2524 178.3706 445.8697 c175.3138 444.5552 172.4504 442.9089 169.8106 440.9975 C171.6031 448.9101 171.1785 456.7125 168.1656 463.6624 c164.6078 471.8694 158.3507 478.6653 150.6724 482.9472 C145.2899 486.5298 138.8715 488.7688 132.1467 489.5225 C115.6625 492.4149 95.8499 489.4434 76.3588 481.1553 c69.1892 478.1069 62.4971 474.617 56.4684 470.783 C48.8434 465.9339 L53.4454 458.1572 L67.7202 434.0348 L72.1075 426.6212 72.1283 426.6314 V79.8682 430.4134 L80.9442 430.9392 L116.4252 351.7104 L119.8356 344.0953 L127.7828 346.6363 L146.9972 352.7796 L155.411 355.4696 L153.1857 364.0182 L142.9857 403.1988 L145.926 405.3604 148.6609 407.6681 151.185 410.0844 C150.6255 405.3951 150.9129 400.6643 152.1912 396.1275 c154.8619 386.6377 161.0838 379.1293 169.7107 374.9852 c179.0285 370.5094 190.4024 370.4975 200.9156 374.9527 c206.1942 377.2045 210.8914 380.4495 214.8547 384.3503 C216.3043 368.7637 L249.9312 373.7036 L249.8866 403.8771 L320.168 369.1166 L320.168 402.7707 L323.0074 402.9988 325.882 403.4454 328.7714 404.1418 c336.522 406.0098 343.1229 408.5869 349.0055 412.1021 C346.0549 394.0526 L383.9459 388.076 L386.0414 401.7285 L395.9399 383.4373 L401.9761 395.0952 L404.1837 375.9611 L447.1565 368.3797 L444.8745 382.8407 L450.7492 382.1792 456.9545 382.9533 462.9411 385.2084 c464.3756 385.7525 465.765 386.3804 467.1163 387.0682 C465.3877 371.6697 L493.9844 367.668 L494.2185 355.9419 L524.0168 346.5657 L562.8529 463.5753 L522.4205 473.3834 Lf0 D0 g354.5413 456.0049 m356.5293 458.1221 L354.1167 443.3658 L347.9149 448.9477 L354.5413 456.0049 Lf0 g329.3644 516.2683 m339.768 502.1303 L310.0125 487.3844 L307.9566 490.4992 L329.3644 516.2683 Lf0 g275.1513 433.6478 m265.4558 437.4094 L274.4851 446.18 L274.0982 442.1355 274.3016 437.9328 275.1513 433.6478 Cf0 g132.2958 407.2223 m144.1554 361.6674 L124.9414 355.5242 L85.4985 443.5989 L83.3634 442.4743 79.4049 440.5838 75.7506 438.7868 C61.4757 462.9094 L67.1705 466.531 73.3843 469.751 80.01 472.5683 c98.6119 480.4781 116.3262 482.825 130.5341 480.3319 C135.5424 479.7582 140.8675 478.2644 145.5022 475.1796 C151.8964 471.5883 156.7761 466.4746 159.6043 459.9509 c166.4704 444.1136 154.9972 421.2348 132.2958 407.2223 Cf0 g213.7727 395.9876 m209.7823 390.4529 204.2637 385.8404 197.7387 383.0567 c181.059 375.9883 164.3919 383.0567 159.9412 398.871 c155.6221 414.2016 165.6638 432.401 181.8231 439.3497 c192.1281 443.7171 202.4741 442.6824 209.8993 437.6425 c214.4925 434.525 217.9705 429.8783 219.6229 424.0197 c219.8035 423.3827 219.9516 422.7403 220.0848 422.0956 c220.5464 419.8632 220.7307 417.5911 220.6557 415.3156 c220.4324 408.5481 217.9384 401.7653 213.7727 395.9876 cf0 g311.372 383.1261 m241.6325 418.0085 L241.7548 381.4658 L223.7138 378.9959 L222.4434 394.0872 L228.0269 403.6242 230.0613 414.8813 227.1416 425.1813 c225.5443 430.8448 222.6065 435.7928 218.6008 439.7216 C216.0128 470.458 L207.8976 468.3409 L207.5447 476.1033 L236.5276 484.7296 L238.2917 454.8498 L259.6414 484.8425 L280.5052 464.9818 L251.3424 434.2339 L278.7398 423.3912 L281.8152 417.5943 286.4611 412.6487 292.336 409.0344 c298.0115 405.5427 304.4913 403.4559 311.372 402.8108 C311.372 383.1261 Lf0 g326.6348 412.9517 m324.4418 412.4231 322.2836 412.0705 320.168 411.8643 c304.1669 410.3048 290.7529 417.6669 285.6435 429.5773 c285.0333 430.9999 284.5396 432.486 284.176 434.0305 c281.811 444.0767 283.8168 453.0386 288.7785 460.0639 c290.2136 462.0957 291.9026 463.9599 293.7982 465.6471 c298.4744 469.8096 304.4408 472.8661 311.1977 474.4949 c326.4575 478.1726 339.8873 473.5086 348.0909 463.4127 C319.0546 432.4878 L321.0342 432.1361 324.1648 432.6535 326.473 433.2101 c333.3975 434.879 337.2789 438.5389 340.6698 442.5541 C352.2761 432.108 L355.8007 428.9358 L354.2555 427.3412 352.6734 425.8769 351.0362 424.5231 c344.3565 418.9992 336.7281 415.3843 326.6348 412.9517 cf0 g436.3833 379.6504 m412.6416 383.2764 L406.3347 425.1186 L397.4052 402.0331 L384.0251 430.8783 L383.8808 430.8783 L378.5831 397.462 L356.3032 401.3371 L359.4268 419.9849 L360.2672 420.77 361.0999 421.5739 361.9182 422.4184 C369.126 429.8567 L362.1346 436.1492 L369.5707 480.5399 L392.0809 480.5399 L397.6928 449.8163 L404.0168 485.4352 L420.0963 485.4352 L426.7784 442.0347 L418.2726 432.3498 414.158 419.3487 416.9989 407.4315 c419.1926 398.2187 424.8722 390.7694 432.9905 386.4559 c433.8134 386.0189 434.6603 385.6311 435.5184 385.268 C436.3833 379.6504 Lf0 g460.1534 392.573 m454.3883 390.4013 448.6974 389.9531 443.594 390.957 c440.058 391.6522 436.8073 393.0471 434.0109 395.0594 c429.5402 398.2768 426.2301 403.0622 424.797 409.0825 c423.0801 416.2835 424.6512 423.9996 428.5218 430.7121 c430.4471 434.0508 432.9412 437.1383 435.8875 439.7913 c439.1552 442.7336 442.9715 445.1439 447.1837 446.756 c457.0161 450.4601 466.6817 449.1657 473.5369 444.2598 c476.0221 442.4814 478.1353 440.2283 479.7537 437.5643 c481.0016 435.5103 481.9617 433.2189 482.5612 430.7074 c484.637 422.0621 482.1524 412.7787 476.6939 405.2965 c474.3687 402.1092 471.506 399.2485 468.2209 396.9054 c465.7506 395.1432 463.0458 393.6703 460.1534 392.573 cf518.4227 357.4443 m501.9356 362.3744 L500.4978 423.1464 L492.203 376.2615 L474.2116 379.1224 L475.4936 392.6394 L487.2397 402.5614 493.4781 418.2092 490.0712 432.3973 c488.5693 438.6891 485.3468 444.15 480.7743 448.3254 C482.2838 464.2433 L475.4932 466.0576 L475.9568 474.56 L506.9483 468.3308 L517.3684 418.9108 L528.0434 463.2135 L551.62 457.9956 L518.4227 357.4443 LBb1 (Borders UPPERMOST Gradient) 294.1283 141.7335 90.6041 162.4245 1.1664 0 0 1.1664 -703.7429 -961.2469 Bg-1.9976 189.4415 518.5893 5.4683 47.8522 339.1006 Xm-148.3699 14070.677 518.5893 5.4683 196.2221 -13731.5764 Bc-1.9976 189.4415 518.5893 5.4683 47.8522 339.1006 Bm-148.3699 14070.677 518.5893 5.4683 45.8546 528.5421 Bcf0 BB*U468.6093 435.8926 m468.7963 435.1824 468.891 434.4425 468.8599 433.6804 c468.6732 429.0756 464.3275 425.5129 459.1539 425.7231 c453.9802 425.9332 449.938 429.8363 450.1248 434.4411 c450.3007 438.7661 454.1454 442.1706 458.899 442.394 C457.9868 442.5901 457.046 442.7217 456.0756 442.7611 c447.4306 443.1122 440.3592 436.9832 440.0492 429.3461 c439.7191 421.2165 446.2704 414.5346 454.7843 414.1889 c463.4291 413.8379 470.5013 419.9665 470.8314 428.096 c470.9461 430.9163 470.1198 433.6036 468.6093 435.8926 CBb1 (Borders UPPERMOST Gradient) 421.3122 201.2987 90.6041 29.2414 1.1664 0 0 1.1664 -703.7429 -961.2469 Bg-0.3596 34.1053 35.9909 0.3795 437.4948 411.1216 Xm-148.3729 14070.6753 35.9909 0.3795 585.8677 -13659.5538 Bc-0.3596 34.1053 35.9909 0.3795 437.4948 411.1216 Bm-148.3729 14070.6753 35.9909 0.3795 437.1352 445.2269 Bcf0 BB206.1359 426.5851 m206.1359 421.9765 201.9387 418.2407 196.7609 418.2407 c191.5829 418.2407 187.3853 421.9765 187.3853 426.5851 c187.3853 430.9138 191.0887 434.4712 195.8295 434.8874 C194.9101 435.0463 193.9649 435.1397 192.9937 435.1397 c184.3416 435.1397 177.5247 428.7288 177.5247 421.0854 c177.5247 412.9492 184.3416 406.5387 192.8628 406.5387 c201.5145 406.5387 208.3324 412.9492 208.3324 421.0854 c208.3324 423.908 207.3976 426.5597 205.7957 428.7854 C206.0109 428.0833 206.1359 427.3479 206.1359 426.5851 cBb1 (Borders UPPERMOST Gradient) 196.3347 195.0362 90.6041 28.6749 1.1664 0 0 1.1664 -703.7429 -961.2469 Bg-0.3527 33.4446 35.5849 0.3752 175.2922 403.8192 Xm-148.3703 14070.6779 35.5849 0.3752 323.6625 -13666.8587 Bc-0.3527 33.4446 35.5849 0.3752 175.2922 403.8192 Bm-148.3703 14070.6779 35.5849 0.3752 174.9395 437.2638 Bcf0 BBUu*u0 g529.4716 354.989 m533.5447 354.989 L533.5447 354.3909 L531.8533 354.3909 L531.8533 349.9691 L531.163 349.9691 L531.163 354.3909 L529.4716 354.3909 L529.4716 354.989 lf*U*u534.1497 349.9691 m534.1497 354.989 L535.1235 354.989 L536.5655 350.7447 L537.9974 354.989 L538.9609 354.989 L538.9609 349.9691 L538.3153 349.9691 L538.3153 352.9317 l538.3153 353.0342 538.3173 353.2039 538.3219 353.4409 c538.3265 353.6778 538.3289 353.9318 538.3289 354.2028 C536.897 349.9691 L536.2238 349.9691 L534.7819 354.2028 L534.7819 354.0491 l534.7819 353.9261 534.7845 353.7386 534.7903 353.487 c534.796 353.2352 534.7989 353.0502 534.7989 352.9317 C534.7989 349.9691 L534.1497 349.9691 lf*UUu*u528.9716 326.489 m533.0447 326.489 L533.0447 325.8909 L531.3533 325.8909 L531.3533 321.4691 L530.663 321.4691 L530.663 325.8909 L528.9716 325.8909 L528.9716 326.489 lf*U*u533.6497 321.4691 m533.6497 326.489 L534.6235 326.489 L536.0655 322.2447 L537.4974 326.489 L538.4609 326.489 L538.4609 321.4691 L537.8153 321.4691 L537.8153 324.4317 l537.8153 324.5342 537.8173 324.7039 537.8219 324.9409 c537.8265 325.1778 537.8289 325.4318 537.8289 325.7028 C536.397 321.4691 L535.7238 321.4691 L534.2819 325.7028 L534.2819 325.5491 l534.2819 325.4261 534.2845 325.2386 534.2903 324.987 c534.296 324.7352 534.2989 324.5502 534.2989 324.4317 C534.2989 321.4691 L533.6497 321.4691 lf*UUuu*u0.9 0.72 0 0 k130.3809 298.286 m129.0167 297.2761 127.7395 296.4154 126.6235 295.7338 C127.1486 298.5645 128.0112 301.327 129.0532 303.9173 C129.023 303.746 128.9959 303.5752 128.9774 303.4076 c128.9631 303.2793 128.9536 303.1505 128.9487 303.0215 c128.884 301.3218 129.4063 299.645 130.3809 298.286 Cf1 D155.8948 316.7082 m154.4694 317.9776 152.6087 318.5389 150.79 318.2479 c150.5105 318.2033 150.2351 318.1366 149.9663 318.0485 c148.9671 317.7214 147.2265 316.8908 142.149 314.3916 C140.0714 313.3706 L138.6376 312.6748 136.5873 311.7085 135.5376 311.4497 c135.4748 311.4342 135.4122 311.4176 135.35 311.3998 c133.606 310.9023 132.1655 309.773 131.0912 308.3968 C133.5434 313.2516 136.2463 317.0725 137.6566 318.9317 C138.5634 318.9935 139.2741 319.1834 139.6499 319.289 c139.7437 319.3154 139.8369 319.3443 139.9293 319.3758 c143.0413 320.4362 144.3983 323.453 144.6304 325.9223 c144.6366 325.9882 144.6415 326.0541 144.6454 326.1201 c144.6776 326.6862 144.6343 327.2154 144.584 327.8281 c144.5563 328.1654 144.525 328.548 144.5055 328.9478 c144.4981 329.1005 144.4802 329.2808 144.4598 329.4323 C144.4035 329.8496 L144.2718 330.8454 144.1132 331.965 143.7069 333.065 c143.0791 334.8751 141.838 336.3032 140.191 337.084 c138.4538 337.9076 136.4074 337.9462 134.4285 337.1929 c134.3794 337.1742 134.3304 337.1547 134.2817 337.1346 c131.747 336.0831 128.5384 333.13 126.8062 330.8851 c121.1453 323.3043 110.1741 305.6731 108.8007 292.7187 c108.7911 292.6281 108.7838 292.5374 108.7788 292.4464 c108.4225 285.9473 110.7903 282.5345 112.8392 280.8161 c114.7837 279.1855 118.2888 277.5194 123.9447 278.8427 c124.0281 278.8624 124.1111 278.8838 124.1936 278.9074 c129.6963 280.4762 135.5077 283.7221 141.5509 288.5784 C142.7642 286.0933 145.514 283.8366 149.8944 284.7586 c149.9614 284.7726 150.0279 284.7881 150.0941 284.8047 c152.9739 285.5264 156.1172 288.1552 156.5528 291.783 c156.5676 291.905 156.5778 292.0272 156.5842 292.1497 c156.6331 293.1087 156.5183 294.0091 156.3969 294.9624 c156.2734 295.932 156.1456 296.9344 156.2071 297.92 c156.3701 299.9517 156.7775 302.8493 157.3476 305.9861 c157.3487 305.9919 157.6296 307.5304 Y157.9355 309.1947 158.0279 309.6969 158.1344 311.0637 c158.1392 311.1256 158.143 311.1878 158.1455 311.25 c158.2365 313.3639 157.4163 315.3532 155.8948 316.7082 cf0 D143.6275 333.297 m143.6588 333.22 143.6782 333.1424 143.7069 333.065 c143.7173 333.0351 143.7346 333.0099 143.7447 332.9797 c143.7091 333.0867 143.6699 333.1925 143.6275 333.297 cf*U178.744 324.985 m175.8907 327.5382 172.0552 328.7982 168.7236 328.2827 C168.0517 328.3885 166.8091 328.5819 165.0318 328.2242 c164.9565 328.209 164.8817 328.1923 164.8072 328.1741 c161.4 327.3355 160.1079 324.9867 159.6096 324.0538 C154.5429 318.5354 150.5613 309.9553 149.8967 303.0677 c149.8894 302.9917 149.8837 302.9157 149.8795 302.8396 c149.583 297.3141 150.9111 293.2021 153.8268 290.6179 c156.5981 288.1616 160.4806 287.3518 165.3666 288.2108 c165.4622 288.2276 165.5572 288.247 165.6518 288.2688 c173.6048 290.1159 182.7544 297.6587 184.0493 309.8554 c184.0605 309.9606 184.0686 310.0662 184.0735 310.172 c184.4455 318.1404 181.3805 322.6255 178.744 324.985 cf198.0781 330.4688 m197.5444 330.9394 196.9524 331.3109 196.3236 331.5945 C196.3299 332.0084 196.3364 332.4291 196.3417 332.8173 c196.3588 334.0825 196.3767 335.3908 196.4093 335.906 c196.5299 338.6069 195.5503 340.9997 193.7272 342.5708 c191.8808 344.1623 189.3943 344.7524 186.7257 344.2325 c186.6205 344.2121 186.5162 344.1885 186.4127 344.1618 c182.3238 343.1084 179.3928 339.5188 178.9455 335.0169 c178.774 332.9327 178.8632 331.0872 178.9492 329.3023 c178.981 328.6463 179.0083 328.0019 179.028 327.3538 C176.4096 326.0395 174.6934 323.3944 174.3781 320.0148 c174.3687 319.9143 174.3621 319.8137 174.3584 319.713 c174.2821 317.6366 175.1503 315.574 176.6809 314.1958 c177.3123 313.6272 178.0399 313.1976 178.8186 312.9013 C178.7557 311.0798 178.6851 309.2412 178.6143 308.2336 c178.4302 305.6363 178.2275 299.5772 178.2559 298.1616 c178.2603 297.9466 178.2774 297.7322 178.3074 297.5194 c178.5591 295.7345 179.4988 294.1536 180.9533 293.0682 c182.2145 292.1271 184.4845 291.1201 188.1371 291.6668 c188.2185 291.6791 188.2996 291.6929 188.3802 291.7089 c192.1653 292.4545 195.3394 295.6655 195.7639 299.1783 c195.7763 299.2818 195.7857 299.3856 195.7921 299.4897 c195.8735 300.7978 196.0312 307.9275 196.0588 309.802 c196.0602 309.9048 196.0588 310.0074 196.0544 310.1102 c196.0094 311.1645 196.0753 314.2589 196.1516 316.7613 C196.1848 316.7784 196.2173 316.7919 196.2504 316.8093 c198.7739 318.1635 200.478 320.981 200.6361 324.0104 c200.6397 324.0769 200.6419 324.1434 200.6428 324.2098 c200.6811 326.7541 199.7703 328.977 198.0781 330.4688 cf215.3705 333.2848 m214.8377 333.7666 214.2452 334.1502 213.6141 334.4434 C213.6238 334.9666 213.6322 335.4804 213.6403 335.9664 c213.6636 337.3843 213.6855 338.7237 213.7216 339.2821 c213.8479 342.0516 212.8699 344.5064 211.0443 346.1229 c209.2391 347.7213 206.8071 348.3598 204.1962 347.9209 c204.085 347.9023 203.9745 347.88 203.8647 347.8544 c199.71 346.8837 196.7287 343.2299 196.269 338.5457 c196.0925 336.3895 196.1745 334.4577 196.254 332.5895 c196.2839 331.8854 196.3107 331.1668 196.3277 330.4353 C193.6965 329.1307 191.9776 326.4663 191.6627 323.027 c191.6539 322.9317 191.6478 322.8365 191.6442 322.7408 c191.5653 320.6609 192.421 318.5854 193.9331 317.1886 c194.5669 316.6033 195.3017 316.1593 196.0899 315.8514 C196.0231 313.9379 195.9479 311.9641 195.8741 310.9131 c195.6869 308.273 195.4857 302.2224 195.5176 300.8448 c195.5223 300.6365 195.5392 300.4284 195.5682 300.2222 c196.0596 296.7197 199.2502 293.5253 205.2705 294.2845 c205.3528 294.2949 205.435 294.3074 205.5166 294.3215 c209.3595 294.9881 212.5821 298.165 213.0124 301.711 c213.0249 301.8141 213.0344 301.9174 213.0409 302.0209 c213.1211 303.2952 213.278 310.44 213.3078 312.3364 c213.3094 312.4387 213.3081 312.5409 213.304 312.6431 c213.2595 313.7157 213.3307 316.894 213.4111 319.4554 C213.4284 319.4641 213.4452 319.4707 213.4624 319.4795 c216.0175 320.8251 217.7371 323.6655 217.9001 326.7445 c217.9034 326.8087 217.9056 326.8728 217.9068 326.937 c217.9505 329.5116 217.0498 331.766 215.3705 333.2848 cf*u1 D239.1033 324.2021 m236.8665 337.7119 230.6902 339.862 225.9057 339.27 c225.7971 339.2565 225.6891 339.2398 225.5815 339.2197 c221.5123 338.4617 214.3957 333.4939 212.3835 331.6297 c212.3042 331.5564 212.2271 331.4804 212.1525 331.4024 c210.5911 329.7704 209.6974 327.8437 209.4962 325.6753 c209.487 325.577 209.4806 325.4781 209.4769 325.3794 c209.3881 322.9997 210.2586 320.8186 211.928 319.2378 c212.4689 318.7256 213.0855 318.3042 213.7419 317.9668 C210.5858 314.8335 207.031 310.4051 206.5642 304.9901 c206.5532 304.8605 206.5466 304.7305 206.5449 304.6006 c206.5139 302.2871 207.3645 300.2282 208.9395 298.8024 c211.4565 296.5244 214.8724 296.6154 217.2226 296.8818 c217.2689 296.8871 217.3149 296.8928 217.3608 296.8993 c218.5499 297.0655 221.5694 297.6201 224.869 299.2474 C226.3142 298.4748 228.0708 298.1786 230.122 298.3778 c230.1717 298.3826 230.2215 298.388 230.2711 298.3942 c231.5115 298.5497 235.6894 299.3146 237.3699 302.6304 c237.4137 302.717 237.4552 302.8046 237.4943 302.8935 c239.076 306.4841 239.481 311.1183 239.522 311.6349 c239.6144 312.8866 240.0178 319.2347 239.1033 324.2021 cf0 D222.0385 311.0355 m222.0399 311.0369 222.0416 311.0385 222.0432 311.0399 C222.0428 311.0126 222.0434 310.9852 222.0434 310.9576 c222.0432 310.9837 222.0384 311.0095 222.0385 311.0355 Cf1 D222.0892 310.2588 m222.095 310.2151 222.1036 310.1721 222.1104 310.1288 C222.1103 310.1287 222.1102 310.1286 222.1101 310.1286 C222.1029 310.1721 222.0953 310.2151 222.0892 310.2588 cf*U0 D277.1645 319.8003 m275.6117 321.3505 273.4086 322.1613 270.9613 322.0833 c270.8208 322.0787 270.6804 322.0689 270.5409 322.0533 c268.5047 321.8277 266.8845 320.8328 265.6067 319.7918 C266.6319 322.051 267.9324 323.8918 268.9731 324.2677 c271.4835 325.1051 274.5828 327.3721 275.0903 333.4157 c275.0946 333.4668 275.0982 333.5179 275.101 333.5692 c275.2601 336.4487 274.5059 338.7425 272.8596 340.3866 c271.7925 341.4521 269.8763 342.6857 266.806 342.5117 c266.5135 342.4953 266.2228 342.4549 265.9369 342.3908 c260.9686 341.2793 248.1149 328.0986 246.5211 313.6438 c246.5111 313.5526 246.5032 313.4612 246.498 313.3696 c246.2847 309.7323 247.222 306.8227 249.2834 304.7215 c251.5828 302.3777 254.8984 301.3253 259.4195 301.5041 c259.5393 301.5088 259.6586 301.5177 259.7777 301.5304 c264.4688 302.0313 277.7761 305.8902 279.1571 313.8859 c279.2 314.1346 279.2254 314.386 279.2329 314.6382 c279.2915 316.577 278.5569 318.4103 277.1645 319.8003 cf*u1 D302.1777 328.4092 m300.4863 339.5467 296.2467 345.1508 289.5913 344.9785 c289.4694 344.9754 289.3475 344.9682 289.2261 344.9566 c285.0188 344.5601 277.7061 339.7954 275.6439 337.9344 c275.5557 337.8547 275.47 337.7721 275.3872 337.6868 c273.8055 336.0563 272.9007 334.0899 272.6979 331.8422 c272.6898 331.7523 272.6839 331.6622 272.6804 331.5719 c272.5857 329.1803 273.4168 326.9489 275.02 325.2888 c275.6762 324.6093 276.4372 324.0656 277.2529 323.6584 C273.9993 320.6386 270.2101 316.2503 269.7265 310.6282 c269.7153 310.4981 269.709 310.3676 269.7071 310.2369 c269.6705 307.3828 270.9023 305.5667 271.942 304.546 c274.3056 302.2253 277.627 302.0523 279.9199 302.1238 c279.9675 302.1254 280.0148 302.1275 280.0622 302.1303 c281.254 302.199 284.2568 302.5095 287.5594 303.8592 C288.9501 302.9744 290.6837 302.5412 292.7358 302.5707 c292.7898 302.5714 292.8437 302.573 292.8978 302.5754 c294.1952 302.6333 298.5685 303.0902 300.3748 306.5425 c300.4205 306.6294 300.4635 306.7177 300.5043 306.807 c302.0575 310.2184 302.4837 314.6731 302.5531 315.5315 c302.6471 316.8017 303.0557 323.2073 302.1777 328.4092 cf0 D290.403 320.7783 m290.2979 320.7713 290.1929 320.763 290.0887 320.7505 C290.0994 320.7597 290.1104 320.7694 290.121 320.7783 C290.2147 320.7846 290.3089 320.7772 290.403 320.7783 Cf1 D285.1142 315.7248 m285.1123 315.6894 285.1159 315.6548 285.1146 315.6194 c285.1158 315.6547 285.1124 315.6897 285.1142 315.7248 cf0 D285.1483 314.7807 m285.1471 314.7901 285.1448 314.7994 285.1438 314.809 c285.1448 314.7994 285.1473 314.7902 285.1483 314.7807 cf*U316.047 342.624 m316.0751 343.6144 316.0991 344.5907 316.1209 345.4925 c316.1613 347.1604 316.1996 348.736 316.2444 349.4274 c316.3878 352.2853 315.4918 354.9262 313.7907 356.7518 c312.2556 358.3988 310.1328 359.3321 307.8131 359.3796 c307.6787 359.3825 307.5441 359.3801 307.4097 359.3726 c302.8289 359.122 299.399 355.271 298.8742 349.7899 c298.6791 347.369 298.7357 345.1209 298.7901 342.9471 c298.8119 342.0825 298.8305 341.2015 298.8377 340.3064 C296.5845 339.2571 294.5281 336.9185 294.152 332.7392 c294.1443 332.6524 294.1384 332.5656 294.1349 332.4785 c294.0493 330.3944 294.8073 328.3391 296.2146 326.8395 c296.88 326.1304 297.6634 325.5801 298.5195 325.2034 C298.4339 322.8956 298.334 320.3157 298.2458 319.06 c298.0502 316.3005 297.8484 310.2846 297.8815 308.8818 c297.8865 308.6751 297.9031 308.4691 297.9319 308.2643 c298.344 305.3175 300.9374 301.8616 306.8903 301.8202 c306.9758 301.8198 307.0613 301.8211 307.1466 301.8246 c311.2573 301.9921 314.8419 305.0751 315.3075 308.8434 c315.3209 308.9514 315.331 309.0599 315.3377 309.1685 c315.4181 310.4596 315.584 317.8289 315.6165 319.6354 c315.6183 319.7338 315.6174 319.8323 315.6138 319.9308 c315.5724 321.0513 315.6584 324.4213 315.7522 327.1638 C318.3233 328.4312 320.0545 331.214 320.2377 334.4309 c320.2416 334.4992 320.2441 334.5673 320.2455 334.6358 c320.3137 338.2836 318.656 341.2524 316.047 342.624 Cf332.875 323.0696 m332.7287 323.0768 332.582 323.0779 332.4357 323.073 c329.9813 322.9912 328.059 321.7432 326.6753 320.6089 C327.7127 323.2348 329.1894 325.381 330.2329 325.6716 c330.1898 325.6596 330.1467 325.6481 330.1031 325.6372 c332.2895 326.1874 336.0403 328.1034 336.5984 334.7546 c336.6026 334.8052 336.6063 334.8558 336.609 334.9064 c336.7645 337.7109 336.069 339.9857 334.5417 341.6677 c333.5633 342.7453 331.7837 344.0547 328.8619 344.1746 c328.5552 344.1871 328.2479 344.1735 327.9435 344.1334 c322.2031 343.3811 309.6696 330.233 308.1148 316.1226 c308.1049 316.0317 308.0971 315.9405 308.0918 315.8493 c308.0136 314.5176 307.7757 310.4648 310.7353 307.1993 c312.8952 304.8162 316.1945 303.521 320.5415 303.3493 c320.664 303.3445 320.7867 303.3439 320.9092 303.3473 c325.6767 303.4856 339.2047 306.4197 340.6216 314.6435 c340.6642 314.8912 340.6895 315.1416 340.6972 315.3929 c340.823 319.5465 337.4603 322.8469 332.875 323.0696 cf355.0089 343.5682 m354.8395 343.5887 354.669 343.6009 354.4984 343.6051 c352.4781 343.6548 350.5868 343.263 348.8495 342.5834 C348.8772 343.4937 348.9125 344.3813 348.9688 345.2026 c349.301 349.4998 349.6334 352.4258 349.9006 354.7768 c350.0551 356.1373 350.1887 357.3123 350.2744 358.3725 c350.278 358.4194 350.2812 358.4665 350.2838 358.5135 c350.5972 364.2852 347.4647 368.6647 342.666 369.1633 c342.5458 369.1759 342.425 369.1843 342.3042 369.1885 c332.5402 369.5405 331.6164 358.5865 331.2685 354.4625 c330.8166 347.6515 331.0263 338.8722 331.1946 331.8179 c331.2745 328.475 331.3435 325.5881 331.3277 323.5731 c331.3272 323.5065 331.3279 323.4398 331.3298 323.373 c331.3337 323.2474 331.8689 310.1926 332.6979 307.1277 c332.7905 306.7848 332.917 306.452 333.0755 306.1341 c334.9208 302.4311 338.0621 301.9954 341.1216 301.8661 c341.2522 301.8607 341.383 301.86 341.5137 301.864 c344.1003 301.9437 346.2953 303.1071 347.6569 304.9295 C348.8883 303.5073 350.7571 302.428 353.3582 302.0917 c353.5322 302.0691 353.7073 302.0551 353.8826 302.0498 c359.2491 301.8852 363.0206 304.9498 363.4909 309.8571 c363.5977 310.8352 363.8848 312.6894 364.1624 314.4827 c364.5117 316.7399 364.8417 318.8721 364.954 320.159 c366.1423 338.3947 360.2008 342.9429 355.0089 343.5682 cf385.9244 361.0557 m385.6521 361.1104 385.3761 361.144 385.0987 361.1562 c380.2706 361.3665 378.3301 356.7954 376.7709 353.1222 c376.3563 352.1458 375.9272 351.1394 375.4732 350.2061 C375.36 349.9988 375.1713 349.6794 374.9792 349.3561 c373.6071 347.0455 372.4494 344.946 372.1799 342.65 c372.1638 342.513 372.1529 342.3754 372.1475 342.2375 c371.9742 337.8818 375.0497 334.2965 379.4598 333.7125 c379.6606 333.6861 379.8627 333.6708 380.0652 333.667 c384.5669 333.5832 388.8828 338.7857 390.0397 340.6145 c390.118 340.7383 390.1912 340.8652 390.2591 340.9949 c391.7126 343.7714 393.4404 348.0698 393.6975 350.1726 c393.7186 350.3462 393.7313 350.5205 393.7355 350.6954 c393.8213 354.2702 391.0892 360.0166 385.9244 361.0557 cf*u1 D401.2852 321.6115 m401.8931 323.2338 402.0101 324.7668 402.089 325.8521 C402.1044 326.0634 L402.1131 326.1814 402.1183 326.3055 402.1191 326.4236 c402.158 331.882 396.3198 340.364 386.7236 341.7792 c386.4054 341.8262 386.0836 341.8446 385.7621 341.8338 c379.186 341.6161 375.5168 330.7397 374.5317 323.0756 C373.0401 321.8915 371.919 320.1406 371.6698 317.2499 c371.6634 317.1763 371.6586 317.1024 371.6553 317.0284 c371.5634 314.9736 372.4388 312.6643 374.0732 311.1551 C374.8663 305.6013 377.9692 300.3724 383.9636 299.4913 c384.2165 299.4542 384.4719 299.435 384.7276 299.4342 c386.9617 299.4271 389.4986 300.4994 395.1683 303.8471 C395.5607 304.078 L399.0957 306.1218 404.471 309.2298 405.1908 314.1162 c405.2151 314.2807 405.2315 314.446 405.2405 314.6119 c405.4089 317.7545 403.8856 320.3216 401.2852 321.6115 Cf0 D377.995 320.2025 m377.8995 320.1796 377.8029 320.1639 377.7083 320.1353 c377.8036 320.1641 377.9002 320.1852 377.995 320.2025 Cf*U442.1686 319.4428 m442.1126 325.408 439.8263 332.8432 433.5664 334.3888 c433.4155 334.4258 433.2634 334.4565 433.1101 334.4805 c430.1393 334.9459 426.9494 334.4695 424.1251 333.2719 C422.5682 334.7533 420.6375 335.7873 418.4513 336.1915 c418.3317 336.2135 418.2116 336.2317 418.0908 336.2457 c415.4841 336.5467 413.0539 335.8347 410.9132 334.558 C409.7383 335.5539 408.1668 336.2884 406.0428 336.6033 c405.9132 336.6225 405.7832 336.637 405.6526 336.6468 c401.7269 336.9381 396.885 333.4764 396.2809 328.4075 c396.2684 328.3004 396.2586 328.1929 396.2524 328.0855 c396.1529 326.3835 396.2923 324.5007 396.4538 322.3206 c396.6298 319.9443 396.8294 317.2508 396.8208 313.8744 c396.8444 312.3793 396.9914 305.2879 397.6462 302.537 c397.7191 302.2312 397.8186 301.9324 397.9435 301.6441 c399.083 299.0159 401.8217 297.2256 405.457 296.7321 c405.5359 296.7214 405.6147 296.7124 405.6939 296.7053 c407.9364 296.5017 410.3727 297.0424 412.1987 298.3364 C413.3677 297.0946 415.2066 296.0643 418.0975 295.6244 c418.1898 295.6103 418.2828 295.5988 418.3759 295.5894 c421.1768 295.3119 423.498 295.9145 425.2755 297.38 c425.3321 297.4268 425.3917 297.485 425.4495 297.5357 C426.7376 295.8659 428.7536 294.7325 431.4117 294.2555 c431.4862 294.2421 431.561 294.2303 431.6359 294.2201 c434.5241 293.8269 436.9436 294.3832 438.8277 295.8738 c440.0398 296.8328 441.5472 298.6186 441.8445 301.6803 c441.8502 301.7377 441.8547 301.7951 441.8585 301.8529 c441.9234 302.8571 441.9098 304.0221 441.894 305.3712 c441.8791 306.6491 441.8622 308.0975 441.9235 309.387 c442.0646 312.2841 442.1606 316.8642 442.1686 319.4428 cf*u1 D475.8474 312.012 m474.1943 321.5485 470.6227 326.6817 464.6223 328.0843 c464.529 328.1061 464.4351 328.1254 464.3406 328.1423 c460.5286 328.8206 453.3748 326.9809 450.5963 325.4569 c450.4654 325.3851 450.3372 325.3077 450.2126 325.2251 c448.137 323.8498 446.9167 321.7966 446.6835 319.287 c446.674 319.1848 446.6674 319.082 446.6638 318.9793 c446.5439 315.5812 448.4799 312.7466 450.908 311.218 C448.1784 309.1959 444.3347 305.4731 443.8261 299.5925 c443.8152 299.467 443.8087 299.3412 443.8068 299.2153 c443.7621 296.4193 444.8547 291.4895 452.6745 289.8867 c452.7226 289.8769 452.7711 289.8675 452.8195 289.8591 c455.3799 289.4072 457.9513 289.4637 460.3461 289.9622 C461.5612 288.7149 463.2307 287.7909 465.2467 287.3348 c465.3022 287.3224 465.3578 287.3107 465.4135 287.3 c468.3186 286.739 472.3346 287.2594 474.0914 290.572 c474.1441 290.6712 474.1934 290.7719 474.2397 290.874 c475.8176 294.3605 476.2437 299.0991 476.287 299.628 c476.4142 301.3706 476.7469 307.266 475.8474 312.012 cf0 D463.1221 306.2763 m463.6182 306.3899 464.1259 306.4336 464.6354 306.4038 C464.6354 306.4035 464.6354 306.4033 464.6354 306.403 C464.1148 306.4142 463.6037 306.363 463.1221 306.2763 Cf1 D458.963 301.1752 m458.9621 301.1326 458.9633 301.0905 458.9633 301.0483 c458.963 301.0908 458.9624 301.1326 458.963 301.1752 cf*U0 D488.0878 296.3779 m487.7655 298.9948 487.3644 302.2516 487.3614 304.788 c487.3759 306.5623 487.1935 309.6927 486.9822 313.3176 c486.7676 317.0017 486.5015 321.572 486.5794 323.2279 C486.7493 325.3462 486.9925 327.2132 487.1888 328.7148 c487.3724 330.1211 487.5176 331.2317 487.5646 332.1986 c487.5701 332.3114 487.572 332.4242 487.5703 332.5369 c487.5093 336.7731 484.031 339.8321 480.6106 340.9846 c480.5386 341.0088 480.4659 341.0316 480.3928 341.0527 c476.9571 342.05 474.5541 341.1099 473.1434 340.1457 c469.9221 337.944 469.2138 333.9343 468.9612 331.1098 c468.9569 331.0631 468.9533 331.0162 468.9504 330.9693 c468.6164 325.6772 469.0508 319.6219 469.4338 314.2796 c469.6511 311.2477 469.8565 308.3838 469.8606 306.3361 c469.8397 302.4722 470.0375 298.5715 470.1817 295.7233 c470.2542 294.2966 470.3165 293.0646 470.3164 292.4782 c470.3164 292.3817 470.3188 292.2855 470.324 292.1891 c470.4226 290.349 471.4068 285.8803 478.398 284.1307 c478.4526 284.1172 478.5073 284.1043 478.5622 284.0924 c481.9169 283.364 484.1613 284.3262 485.4532 285.2616 c487.1823 286.5135 488.2677 288.4815 488.5093 290.8032 c488.5216 290.9207 488.53 291.0383 488.5344 291.1564 c488.5785 292.3224 488.4117 293.7488 488.0878 296.3779 cf500.1318 293.5345 m499.816 296.1658 499.4229 299.4405 499.4181 301.9429 c499.4326 303.7477 499.2304 307.0526 499.0163 310.5512 c498.802 314.0563 498.5364 318.402 498.6037 319.948 C498.7653 321.9447 498.9986 323.6896 499.187 325.0934 c499.3673 326.4356 499.5097 327.4957 499.5518 328.4373 c499.557 328.552 499.5585 328.6666 499.5563 328.7813 c499.478 332.8558 496.0378 335.8825 492.663 337.0743 c492.5941 337.0988 492.5246 337.1216 492.4546 337.1433 c488.9502 338.2223 486.5114 337.3045 485.0826 336.3445 c481.9017 334.2074 481.2144 330.3787 480.9743 327.6845 c480.9703 327.6386 480.9668 327.5928 480.9638 327.5469 c480.6487 322.5702 481.0878 316.7404 481.4752 311.5969 c481.7046 308.5525 481.9213 305.6769 481.9263 303.6056 c481.9073 299.775 482.0993 295.8349 482.2396 292.958 c482.3107 291.4957 482.3722 290.2326 482.3727 289.62 c482.3728 289.5337 482.3749 289.4473 482.3793 289.3611 c482.4693 287.5245 483.425 283.0498 490.3331 281.1646 c490.3865 281.15 490.4402 281.1364 490.4938 281.1234 c493.8478 280.3186 496.1158 281.2557 497.4277 282.1837 c499.1961 283.4344 500.3065 285.4304 500.5544 287.804 c500.5665 287.9192 500.5748 288.0346 500.5792 288.1504 c500.6262 289.3389 500.449 290.8919 500.1318 293.5345 cfU*u1 g152.0619 306.947 m151.5185 303.9575 151.0453 300.7607 150.8453 298.2549 C150.6894 295.7577 151.2799 293.6207 151.2189 292.4236 C151.0743 291.22 149.7035 290.2452 148.7882 290.0158 C147.8711 289.8227 146.7611 289.7466 146.2546 291.2269 C146.0032 291.9459 145.9305 293.4714 146.068 295.3904 C146.2413 297.6246 146.484 299.2746 146.7087 300.5821 C138.0478 291.6831 129.8035 286.0934 122.7206 284.0739 C116.3433 282.5815 113.8112 286.101 114.143 292.1522 C115.2638 302.7235 124.3079 318.5605 131.0596 327.6031 C132.5907 329.5874 135.0881 331.6528 136.3402 332.1723 C137.2721 332.5269 138.2543 332.4628 138.6475 331.2818 C138.9099 330.6338 139.0133 329.5866 139.1394 328.6864 C139.1915 327.6196 139.3021 326.7829 139.2816 326.4253 C139.2264 325.838 138.9152 324.7059 138.1965 324.461 C137.8751 324.3707 137.5087 324.2695 137.0578 324.2784 C136.6741 324.3117 136.1901 324.3645 135.9349 324.3017 C135.6134 324.2074 134.7628 323.9072 133.6806 322.5791 C129.1099 316.6561 122.0231 305.3753 120.8648 293.4532 C120.6328 289.4154 122.2066 288.3365 124.8994 288.9444 C129.021 290.1637 138.2796 296.7417 144.4659 303.9918 C144.8801 304.4064 145.1374 304.755 145.4958 305.2216 C144.6452 305.0167 143.9335 304.4058 141.6605 303.2461 C139.387 302.0136 138.4142 301.0577 136.7787 300.6529 C135.1403 300.3442 134.2751 301.7088 134.3171 302.8174 C134.4407 303.9352 135.519 305.8613 136.8239 306.2336 C138.1341 306.5567 139.8929 307.3121 142.4343 308.5458 C145.9747 310.2797 150.6548 312.6208 151.6386 312.9431 C152.0975 313.0166 152.8223 312.5039 152.7782 311.4809 C152.6713 310.1099 152.6146 310.0064 152.0619 306.947 Cf*U*u163.7266 320.6009 m164.5315 321.3917 164.3922 322.5392 166.0911 322.9574 C167.7282 323.2867 168.0242 322.6841 169.5291 322.9735 C172.6699 323.4723 179.1806 320.565 178.707 310.4225 C177.6348 300.3234 169.9169 294.7748 164.4364 293.502 C158.8803 292.5251 154.7881 294.0545 155.2442 302.5518 C155.8024 308.3364 159.3511 315.931 163.7266 320.6009 Cf1 D171.6379 307.8255 m171.9522 313.1387 170.2672 317.842 168.4433 317.6837 C166.5671 317.0756 163.1 310.625 162.5041 304.363 C162.1758 299.1591 163.5604 297.6656 165.5849 297.9718 C167.9284 298.5613 171.1107 302.4368 171.6379 307.8255 Cf*U*u0 D181.5374 317.8308 m180.3638 317.6637 179.6949 318.6402 179.7272 319.5157 C179.8573 320.9108 180.4728 322.4441 181.9729 322.784 C182.822 322.9586 183.6278 323.4452 184.3457 323.5922 C184.636 327.939 184.0138 331.094 184.2915 334.4857 C184.4766 336.3484 185.5959 338.4036 187.7529 338.9593 C190.1759 339.4312 191.1201 337.8829 191.0476 336.2442 C190.9438 334.5995 190.9947 329.1601 190.7553 325.727 C191.6132 326.0526 192.0446 326.6171 193.0872 326.822 C194.4575 327.0162 195.2964 325.9667 195.2711 324.2906 C195.1992 322.913 194.4139 321.9205 193.7538 321.5662 C192.7439 321.0361 191.5855 320.7004 190.9202 320.4484 C190.8325 319.12 190.6018 311.8748 190.687 309.8808 C190.6565 307.8079 190.4981 300.9172 190.4302 299.8225 C190.3045 298.7817 189.0355 297.3135 187.342 296.9799 C185.2572 296.668 183.7909 297.1081 183.6272 298.2696 C183.6032 299.4633 183.795 305.3408 183.9736 307.858 C184.1502 310.3766 184.3032 317.0262 184.4035 318.5493 C183.4862 318.3126 182.5166 318.0118 181.5374 317.8308 Cf*U*u198.8152 320.7516 m197.643 320.6136 196.9784 321.6365 197.0126 322.5371 C197.1442 323.9731 197.7638 325.5435 199.262 325.8533 C200.1098 326.0094 200.915 326.4904 201.6318 326.6215 C201.9336 331.1195 201.3247 334.4527 201.6157 338.0211 C201.8081 339.9817 202.9326 342.1197 205.0868 342.6229 C207.5043 343.0294 208.4387 341.3542 208.3607 339.6305 C208.2485 337.9045 208.2818 332.1996 208.0329 328.6459 C208.89 328.9573 209.3218 329.5284 210.3629 329.7125 C211.73 329.8734 212.5646 328.7586 212.5351 327.0281 C212.4602 325.6081 211.6753 324.6099 211.0146 324.2618 C210.0075 323.7463 208.8473 323.4315 208.1843 323.1891 C208.094 321.8239 207.8527 314.4377 207.9361 312.4209 C207.9033 310.3283 207.7474 303.443 207.6791 302.3584 C207.5542 301.3292 206.2897 299.9082 204.5983 299.6148 C202.5176 299.3525 201.0501 299.8168 200.8886 300.9686 C200.8612 302.1488 201.0535 308.0052 201.2332 310.5372 C201.411 313.0724 201.5722 319.8529 201.6769 321.4127 C200.7592 321.1949 199.7936 320.9143 198.8152 320.7516 Cf*U*u226.9297 307.233 m223.9943 304.2169 219.7376 302.6561 216.6173 302.22 C213.4999 301.8664 211.8881 302.3862 211.9167 304.5288 C212.2442 308.3286 215.0167 311.8625 218.7261 315.3027 C221.7311 318.2815 225.0759 321.2037 225.9819 322.0408 C226.5375 322.5419 227.097 322.8808 227.555 323.0162 C227.3879 325.37 226.7348 327.8772 224.7224 327.7208 C222.9025 327.4179 220.3532 325.4147 219.199 324.0747 C219.02 323.8515 218.1038 322.5948 217.4531 322.4645 C216.3493 322.3628 214.7736 323.2512 214.8455 325.1788 C214.9464 326.2645 215.4129 327.039 216.0343 327.6885 C218.0846 329.5878 224.2241 333.5019 226.5655 333.9382 C228.5821 334.1876 232.0828 333.7164 233.8198 323.2293 C234.5991 318.9971 234.2552 313.2628 234.1665 312.0598 C234.0661 310.7954 233.6163 307.4167 232.5777 305.0591 C232.2025 304.3187 230.3182 303.8145 229.603 303.7249 C228.5011 303.6179 226.5523 303.63 226.6091 305.4595 C226.718 306.0565 226.8207 306.6307 226.9297 307.233 Cf1 D220.3011 311.3197 m219.093 309.6496 218.8746 308.8791 218.7901 307.8483 C218.7453 306.9416 219.2867 306.5458 220.2616 306.6401 C223.183 307.0796 225.0457 309.5282 225.7015 310.0092 C226.6488 310.6069 227.5238 311.1212 227.399 310.9784 C227.5502 312.9878 227.7433 315.5906 227.7572 318.2311 C225.8456 316.7599 222.2825 313.9256 220.3011 311.3197 Cf*U*u0 D258.5966 314.5406 m258.4405 312.1759 258.8296 311.0255 261.0261 311.1182 C263.2905 311.3247 265.306 312.7142 266.4431 313.3522 C267.4965 314.0173 269.3211 316.5129 271.1325 316.7136 C272.9395 316.7713 273.8936 315.8137 273.8631 314.8002 C273.2079 311.007 264.0034 307.3845 259.2074 306.8723 C252.6203 306.6119 251.6663 309.732 251.861 313.055 C253.2378 325.541 264.7187 336.6132 267.1097 337.1481 C268.7902 337.2432 269.8834 336.5213 269.7367 333.8653 C269.5713 331.8943 269.0383 329.9529 267.2733 329.364 C262.1247 327.509 259.0424 319.0931 258.5966 314.5406 Cf*U*u290.0015 311.6679 m287.082 308.8708 282.8533 307.6727 279.7523 307.4936 C276.654 307.3968 275.0515 308.0313 275.079 310.1678 C275.4039 313.9443 278.1646 317.3349 281.8614 320.5838 C284.8537 323.4135 288.1897 326.1792 289.0915 326.9794 C289.6457 327.4545 290.2006 327.7612 290.6575 327.8613 C290.5001 330.3494 289.8585 333.0844 287.8662 333.1142 C286.0555 332.9707 283.5164 331.0779 282.3647 329.7591 C282.1832 329.538 281.2698 328.29 280.6235 328.2112 C279.5284 328.206 277.967 329.2974 278.0485 331.3595 C278.153 332.5166 278.6221 333.3058 279.2432 333.9461 C281.2912 335.7941 287.4004 339.3884 289.7303 339.6081 C291.7324 339.6599 295.1915 338.6296 296.8804 327.5153 C297.6387 323.0221 297.2882 317.182 297.1984 315.9657 C297.0948 314.6873 296.649 311.3042 295.6149 309.0334 C295.2425 308.3217 293.37 307.9741 292.6585 307.9425 C291.5634 307.9267 289.627 308.093 289.6822 309.9145 C289.7906 310.5034 289.8928 311.0719 290.0015 311.6679 Cf1 D283.4176 316.3522 m282.2148 314.7462 281.9974 313.9841 281.9118 312.948 C281.8692 312.0368 282.4075 311.5936 283.3736 311.6108 C286.2829 311.8189 288.1307 314.1404 288.7828 314.5736 C289.7248 315.1004 290.5989 315.5599 290.4712 315.4196 C290.6241 317.4523 290.823 320.1088 290.8422 322.8443 C288.9389 321.4828 285.3918 318.8541 283.4176 316.3522 Cf*U*u0 D301.2691 329.9902 m300.1121 330.0164 299.4617 331.2586 299.5028 332.2578 C299.6453 333.8429 300.2688 335.5187 301.7553 335.6162 C302.5955 335.6473 303.3926 336.0568 304.1027 336.0843 C304.4385 341.1035 303.8874 345.1114 304.2222 349.2781 C304.4416 351.5706 305.5711 353.8916 307.7032 354.0084 C310.0797 353.9598 310.9828 351.7646 310.8832 349.7743 C310.7546 347.785 310.7148 341.2147 310.4414 337.2771 C311.2881 337.4827 311.7175 338.0459 312.7508 338.0736 C314.097 338.0227 314.9094 336.6313 314.8739 334.7364 C314.7855 333.1829 314.0098 332.2197 313.3515 331.9449 C312.351 331.541 311.2041 331.3757 310.5469 331.2133 C310.4475 329.7367 310.1669 321.8517 310.245 319.7324 C310.2056 317.5511 310.0422 310.5705 309.9757 309.5021 C309.8508 308.4911 308.6061 307.2608 306.9278 307.1924 C304.8677 307.2068 303.414 307.8531 303.2524 309.0083 C303.2247 310.1815 303.4196 316.0687 303.6049 318.6832 C303.7888 321.3005 303.9922 328.5749 304.1025 330.2744 C303.1931 330.1769 302.2356 330.0135 301.2691 329.9902 Cf*U*u352.7408 321.6241 m353.0626 327.3124 352.4139 331.8552 350.9685 332.1138 C348.3227 331.9956 343.8399 325.6514 343.3524 321.4223 C343.1597 318.8127 343.0416 315.5214 343.2146 313.776 C343.4291 312.2814 343.814 310.3915 343.7414 309.1452 C343.6019 307.8436 342.5727 307.2716 341.3483 307.2337 C338.4622 307.3557 338.2782 307.7388 337.8839 308.5301 C337.3884 310.3623 336.7926 320.3893 336.6999 323.5314 C336.75 329.9618 335.9854 344.3988 336.6218 354.0111 C337.2496 361.454 338.7702 363.9401 342.1107 363.8198 C344.0868 363.6144 345.0628 361.4461 344.9194 358.8049 C344.7061 356.1632 344.1521 352.5997 343.6091 345.5695 C343.2774 340.7254 343.4974 334.5164 343.2938 329.7742 C344.3032 333.0046 348.7074 338.3733 354.3666 338.2343 C358.2451 337.7674 360.3198 331.6546 359.602 320.6257 C359.4188 318.5247 358.412 312.8411 358.1432 310.3696 C357.9855 308.7253 357.0665 307.3271 354.0473 307.4196 C352.0749 307.6746 351.122 308.6584 351.1831 310.0515 C351.3708 312.2033 352.2927 316.0269 352.7408 321.6241 Cf*U*u380.2602 347.7615 m382.1277 351.5716 383.3191 355.8562 384.8648 355.7889 C386.9472 355.37 388.4017 352.3632 388.3647 350.8243 C388.2524 349.9058 387.0561 346.4602 385.4994 343.4866 C384.0607 341.2121 381.1964 339.0193 380.1652 339.0384 C378.7022 339.2321 377.445 340.246 377.5157 342.024 C377.7238 343.7985 379.5641 346.4469 380.2602 347.7615 Cf*U*u385.1112 315.5004 m384.9275 312.203 386.2688 310.3822 387.1515 310.2242 C388.0503 310.1703 389.2634 310.8069 391.0552 312.2772 C392.1468 313.1989 393.6483 314.7917 395.3381 316.048 C396.4279 316.8085 397.0218 317.173 397.8545 317.101 C399.381 316.9027 399.9436 316.1624 399.8759 314.8992 C399.5357 312.5895 395.3426 310.1576 392.8495 308.7162 C391.5079 307.932 386.3538 304.8014 384.7447 304.8066 C380.5593 305.4217 379.0216 310.7045 379.2569 314.9293 C379.2585 314.9511 379.26 314.9708 379.2617 314.9924 C378.9266 314.8913 378.6431 314.8565 378.0675 314.9018 C377.4995 314.9916 376.9893 316.0511 377.0223 316.7885 C377.1832 318.6562 377.6995 319.0197 379.6216 319.7751 C379.6582 320.2628 379.6931 320.7281 379.7299 321.2165 C380.5103 329.7996 384.1331 336.4046 385.9399 336.4644 C392.7991 335.4529 396.7672 329.3181 396.7469 326.462 C396.5977 324.4557 396.5474 322.5327 394.0864 321.0054 C392.1181 319.8661 386.3056 317.2692 385.189 316.533 C385.1623 316.1789 385.1379 315.8548 385.1112 315.5004 Cf1 D385.5393 322.0187 m386.7491 322.6223 390.2727 324.0596 391.3016 324.6855 C391.4158 327.0232 390.1816 328.9787 388.0856 329.2792 C386.9888 329.2008 385.7617 324.4832 385.5393 322.0187 Cf*U*u0 D415.6768 303.7032 m415.7562 304.5849 416.9322 315.9404 417.0162 319.0145 C417.0688 321.7979 416.5753 325.1399 414.9428 325.5089 C413.2047 325.5819 409.2423 321.6302 408.7429 317.0263 C408.3529 310.837 409.8105 306.4654 409.668 303.5721 C409.4747 302.3109 407.0767 301.9741 406.1798 302.0555 C404.5254 302.2801 403.2322 302.9518 402.8726 303.7811 C402.4175 305.6925 402.2279 311.7378 402.1933 313.861 C402.2099 320.5471 401.4461 324.8714 401.6156 327.7717 C401.8949 330.1163 404.2929 331.3606 405.255 331.2891 C407.5464 330.9494 408.7898 330.2221 408.9006 324.9338 C410.8762 328.2419 414.211 331.2857 417.4743 330.9088 C419.7561 330.4867 421.7785 328.7363 422.4522 325.6502 C424.7409 328.3979 429.0257 329.6825 432.2786 329.173 C435.4121 328.3994 436.7606 323.2259 436.7962 319.4595 C436.7882 316.8486 436.6908 312.3875 436.5573 309.6419 C436.4269 306.9007 436.6069 303.8948 436.4974 302.1996 C436.3334 300.5128 435.3609 299.1349 432.3607 299.5434 C429.3832 300.0778 429.0875 301.4908 429.1922 303.1107 C429.47 306.7144 430.2115 313.4796 430.4681 316.7477 C430.6765 319.6029 430.8972 323.595 428.8965 324.0927 C426.8542 324.387 425.7403 323.5532 423.243 321.212 C423.2116 320.9205 423.153 313.5999 423.0408 311.053 C422.9058 308.3162 422.9139 305.3131 422.796 303.644 C422.641 301.9803 421.8459 300.6443 418.9056 300.9356 C416.2359 301.3418 415.5917 302.1173 415.6768 303.7032 Cf*U*u463.8484 297.2705 m460.9683 294.9713 456.809 294.6105 453.7532 295.1496 C450.7154 295.7723 449.1425 296.8787 449.1785 299.1296 C449.5191 303.0669 452.2251 305.8039 455.8503 308.0744 C458.7828 310.1003 462.0422 311.8322 462.9202 312.3379 C463.4627 312.6353 464.0038 312.7759 464.4517 312.7593 C464.2757 314.9945 463.6007 317.4536 461.6563 317.9605 C459.8661 318.2711 457.4033 317.2548 456.2871 316.3655 C456.0708 316.1795 455.2288 315.3193 454.5895 315.3992 C453.5173 315.6497 451.9699 317.0103 452.0328 318.7899 C452.1249 319.7812 452.5764 320.3466 453.18 320.7466 C455.1613 321.8333 461.0977 323.2626 463.3996 322.8531 C465.357 322.3953 468.8103 321.1533 470.5691 311.0117 C471.3543 306.8687 471.0207 301.2757 470.9326 300.0672 C470.8287 298.7994 470.3751 295.3645 469.3453 293.0891 C468.9693 292.3805 467.1346 292.439 466.432 292.5747 C465.3587 292.8176 463.4597 293.5023 463.5248 295.4608 C463.6348 296.0716 463.7387 296.6589 463.8484 297.2705 Cf1 D457.3878 303.593 m456.2035 302.2633 455.9867 301.5274 455.9035 300.4748 C455.8578 299.5435 456.3854 298.9459 457.3353 298.7424 C460.2073 298.2885 462.0177 300.283 462.6598 300.5776 C463.5886 300.901 464.4622 301.1788 464.3205 301.0529 C464.4693 303.0747 464.6637 305.6252 464.6685 308.1689 C462.8061 307.3347 459.3237 305.6446 457.3878 303.593 Cf*U*u0 D478.8953 335.8933 m480.3363 335.4079 482.1753 334.0733 482.1986 332.4594 C482.117 330.7803 481.5435 327.7021 481.217 323.5746 C481.0324 320.1398 482.0189 308.4868 481.989 304.7819 C481.9949 299.8753 483.2376 293.2537 483.1658 291.3595 C482.9701 289.4788 481.6715 288.9147 479.7021 289.3423 C477.8735 289.8 475.78 290.7732 475.6886 292.4765 C475.6894 294.4921 475.2015 300.4932 475.233 306.3468 C475.2214 312.2054 473.8092 322.6598 474.312 330.6312 C474.76 335.6393 476.3659 336.6275 478.8953 335.8933 Cf*U*u490.8738 332.0088 m492.3081 331.5021 494.1558 330.192 494.1849 328.678 C494.1144 327.1039 493.5541 324.2288 493.2408 320.2904 C493.071 317.009 494.0749 305.6211 494.0457 301.9326 C494.0552 297.0505 495.2875 290.3001 495.2111 288.362 C495.0102 286.4381 493.7163 285.875 491.7474 286.3474 C489.9232 286.8452 487.8308 287.8803 487.745 289.6245 C487.7432 291.6848 487.2699 297.7986 487.2987 303.6191 C487.2842 309.4434 485.8481 319.6686 486.3254 327.2075 C486.7471 331.9379 488.3484 332.7863 490.8738 332.0088 Cf*U*u320.1515 316.5038 m319.9955 314.1229 320.3843 312.9305 322.5639 312.8516 C324.8189 312.8807 326.8194 314.1259 327.9504 314.6801 C328.9983 315.2682 330.8095 317.6434 332.6145 317.7035 C334.4105 317.6163 335.3581 316.5713 335.3273 315.5556 C334.6742 311.7654 325.529 308.8559 320.7535 308.7174 C314.2137 308.9757 313.2582 312.1852 313.455 315.5341 C314.8392 328.0979 326.2519 338.4934 328.6419 338.8066 C330.3091 338.7384 331.3938 337.8897 331.2448 335.2038 C331.0775 333.2096 330.5496 331.2894 328.7921 330.8472 C323.6651 329.4197 320.5987 321.0855 320.1515 316.5038 Cf*Uu0.9 0.72 0 0 k520.852 291.0232 m520.3849 291.5675 520.0638 292.131 519.5258 292.5643 C520.4242 293.8628 520.8254 295.0931 520.9584 296.9434 c521.0151 297.7332 521.1371 299.0742 521.2782 300.6271 c521.5691 303.8224 521.9671 308.1986 522.2189 312.3169 c522.4511 316.1793 522.8996 319.6427 523.1678 321.7121 c523.2923 322.6748 523.3678 323.2559 523.3981 323.6795 c523.7604 328.7245 520.2027 332.804 515.1224 333.169 c512.9904 333.322 510.7221 332.5045 508.8991 330.9258 c507.0853 329.355 505.9597 327.2695 505.8114 325.2037 c505.743 324.2516 505.7491 322.2291 505.766 318.7364 c505.7822 315.3706 505.8023 311.182 505.6888 309.6015 c505.5463 307.618 505.4049 303.8913 505.2911 300.8969 c505.2218 299.0659 505.1561 297.3366 505.1204 296.8398 c505.0198 295.4403 505.1794 294.4185 506.0001 293.1915 C503.6707 291.9024 502.1871 289.5275 501.9265 286.9088 c501.7059 284.6935 502.3118 282.6803 503.6785 281.087 c505.4469 279.0255 508.2449 277.9195 512.2324 277.7057 c517.357 277.431 522.7882 279.5991 523.2537 284.2747 c523.4565 286.313 522.5541 289.0388 520.852 291.0232 cf*u1 g514.7948 328.6085 m517.5242 328.4125 519.0056 326.3465 518.8375 324.007 c518.7629 322.9673 517.9914 318.1892 517.6551 312.5959 c517.2813 306.4827 516.5753 299.7402 516.3979 297.271 c516.2719 295.5163 515.4547 294.0536 513.4343 294.0934 c510.5728 294.1496 509.7057 296.1226 509.8131 297.6173 c509.9156 299.0469 510.0207 306.0898 510.2492 309.274 c510.4732 312.3931 510.2366 322.9918 510.3719 324.8764 c510.4979 326.6309 512.7803 328.7532 514.7948 328.6085 cf512.9409 290.6909 m516.055 290.4942 518.5919 286.6041 518.2539 284.8553 c517.9853 283.4653 515.3762 282.4987 512.6497 282.6446 c508.9497 282.843 507.0132 284.0414 507.2492 286.4108 c507.4212 288.1399 510.7714 290.8279 512.9409 290.6909 cf*UUUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_screens_AI5 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF